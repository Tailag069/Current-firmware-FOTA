
FOTA_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002284  08020188  08020188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802240c  0802240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802242c  0802242c  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  0802242c  0802242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022434  08022434  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022434  08022434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022438  08022438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0802243c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          00000068  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ecf  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001415  00000000  00000000  00027f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000650  00000000  00000000  00029358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d8  00000000  00000000  000299a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb9a  00000000  00000000  00029f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008009  00000000  00000000  00049b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1582  00000000  00000000  00051b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001130a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018c4  00000000  00000000  001130f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020188 <__do_global_dtors_aux>:
 8020188:	b510      	push	{r4, lr}
 802018a:	4c05      	ldr	r4, [pc, #20]	; (80201a0 <__do_global_dtors_aux+0x18>)
 802018c:	7823      	ldrb	r3, [r4, #0]
 802018e:	b933      	cbnz	r3, 802019e <__do_global_dtors_aux+0x16>
 8020190:	4b04      	ldr	r3, [pc, #16]	; (80201a4 <__do_global_dtors_aux+0x1c>)
 8020192:	b113      	cbz	r3, 802019a <__do_global_dtors_aux+0x12>
 8020194:	4804      	ldr	r0, [pc, #16]	; (80201a8 <__do_global_dtors_aux+0x20>)
 8020196:	f3af 8000 	nop.w
 802019a:	2301      	movs	r3, #1
 802019c:	7023      	strb	r3, [r4, #0]
 802019e:	bd10      	pop	{r4, pc}
 80201a0:	20000040 	.word	0x20000040
 80201a4:	00000000 	.word	0x00000000
 80201a8:	080223f4 	.word	0x080223f4

080201ac <frame_dummy>:
 80201ac:	b508      	push	{r3, lr}
 80201ae:	4b03      	ldr	r3, [pc, #12]	; (80201bc <frame_dummy+0x10>)
 80201b0:	b11b      	cbz	r3, 80201ba <frame_dummy+0xe>
 80201b2:	4903      	ldr	r1, [pc, #12]	; (80201c0 <frame_dummy+0x14>)
 80201b4:	4803      	ldr	r0, [pc, #12]	; (80201c4 <frame_dummy+0x18>)
 80201b6:	f3af 8000 	nop.w
 80201ba:	bd08      	pop	{r3, pc}
 80201bc:	00000000 	.word	0x00000000
 80201c0:	20000044 	.word	0x20000044
 80201c4:	080223f4 	.word	0x080223f4

080201c8 <strlen>:
 80201c8:	4603      	mov	r3, r0
 80201ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201ce:	2a00      	cmp	r2, #0
 80201d0:	d1fb      	bne.n	80201ca <strlen+0x2>
 80201d2:	1a18      	subs	r0, r3, r0
 80201d4:	3801      	subs	r0, #1
 80201d6:	4770      	bx	lr

080201d8 <__aeabi_uldivmod>:
 80201d8:	b953      	cbnz	r3, 80201f0 <__aeabi_uldivmod+0x18>
 80201da:	b94a      	cbnz	r2, 80201f0 <__aeabi_uldivmod+0x18>
 80201dc:	2900      	cmp	r1, #0
 80201de:	bf08      	it	eq
 80201e0:	2800      	cmpeq	r0, #0
 80201e2:	bf1c      	itt	ne
 80201e4:	f04f 31ff 	movne.w	r1, #4294967295
 80201e8:	f04f 30ff 	movne.w	r0, #4294967295
 80201ec:	f000 b974 	b.w	80204d8 <__aeabi_idiv0>
 80201f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80201f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80201f8:	f000 f806 	bl	8020208 <__udivmoddi4>
 80201fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020204:	b004      	add	sp, #16
 8020206:	4770      	bx	lr

08020208 <__udivmoddi4>:
 8020208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802020c:	9d08      	ldr	r5, [sp, #32]
 802020e:	4604      	mov	r4, r0
 8020210:	468e      	mov	lr, r1
 8020212:	2b00      	cmp	r3, #0
 8020214:	d14d      	bne.n	80202b2 <__udivmoddi4+0xaa>
 8020216:	428a      	cmp	r2, r1
 8020218:	4694      	mov	ip, r2
 802021a:	d969      	bls.n	80202f0 <__udivmoddi4+0xe8>
 802021c:	fab2 f282 	clz	r2, r2
 8020220:	b152      	cbz	r2, 8020238 <__udivmoddi4+0x30>
 8020222:	fa01 f302 	lsl.w	r3, r1, r2
 8020226:	f1c2 0120 	rsb	r1, r2, #32
 802022a:	fa20 f101 	lsr.w	r1, r0, r1
 802022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8020232:	ea41 0e03 	orr.w	lr, r1, r3
 8020236:	4094      	lsls	r4, r2
 8020238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 802023c:	0c21      	lsrs	r1, r4, #16
 802023e:	fbbe f6f8 	udiv	r6, lr, r8
 8020242:	fa1f f78c 	uxth.w	r7, ip
 8020246:	fb08 e316 	mls	r3, r8, r6, lr
 802024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802024e:	fb06 f107 	mul.w	r1, r6, r7
 8020252:	4299      	cmp	r1, r3
 8020254:	d90a      	bls.n	802026c <__udivmoddi4+0x64>
 8020256:	eb1c 0303 	adds.w	r3, ip, r3
 802025a:	f106 30ff 	add.w	r0, r6, #4294967295
 802025e:	f080 811f 	bcs.w	80204a0 <__udivmoddi4+0x298>
 8020262:	4299      	cmp	r1, r3
 8020264:	f240 811c 	bls.w	80204a0 <__udivmoddi4+0x298>
 8020268:	3e02      	subs	r6, #2
 802026a:	4463      	add	r3, ip
 802026c:	1a5b      	subs	r3, r3, r1
 802026e:	b2a4      	uxth	r4, r4
 8020270:	fbb3 f0f8 	udiv	r0, r3, r8
 8020274:	fb08 3310 	mls	r3, r8, r0, r3
 8020278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802027c:	fb00 f707 	mul.w	r7, r0, r7
 8020280:	42a7      	cmp	r7, r4
 8020282:	d90a      	bls.n	802029a <__udivmoddi4+0x92>
 8020284:	eb1c 0404 	adds.w	r4, ip, r4
 8020288:	f100 33ff 	add.w	r3, r0, #4294967295
 802028c:	f080 810a 	bcs.w	80204a4 <__udivmoddi4+0x29c>
 8020290:	42a7      	cmp	r7, r4
 8020292:	f240 8107 	bls.w	80204a4 <__udivmoddi4+0x29c>
 8020296:	4464      	add	r4, ip
 8020298:	3802      	subs	r0, #2
 802029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802029e:	1be4      	subs	r4, r4, r7
 80202a0:	2600      	movs	r6, #0
 80202a2:	b11d      	cbz	r5, 80202ac <__udivmoddi4+0xa4>
 80202a4:	40d4      	lsrs	r4, r2
 80202a6:	2300      	movs	r3, #0
 80202a8:	e9c5 4300 	strd	r4, r3, [r5]
 80202ac:	4631      	mov	r1, r6
 80202ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202b2:	428b      	cmp	r3, r1
 80202b4:	d909      	bls.n	80202ca <__udivmoddi4+0xc2>
 80202b6:	2d00      	cmp	r5, #0
 80202b8:	f000 80ef 	beq.w	802049a <__udivmoddi4+0x292>
 80202bc:	2600      	movs	r6, #0
 80202be:	e9c5 0100 	strd	r0, r1, [r5]
 80202c2:	4630      	mov	r0, r6
 80202c4:	4631      	mov	r1, r6
 80202c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202ca:	fab3 f683 	clz	r6, r3
 80202ce:	2e00      	cmp	r6, #0
 80202d0:	d14a      	bne.n	8020368 <__udivmoddi4+0x160>
 80202d2:	428b      	cmp	r3, r1
 80202d4:	d302      	bcc.n	80202dc <__udivmoddi4+0xd4>
 80202d6:	4282      	cmp	r2, r0
 80202d8:	f200 80f9 	bhi.w	80204ce <__udivmoddi4+0x2c6>
 80202dc:	1a84      	subs	r4, r0, r2
 80202de:	eb61 0303 	sbc.w	r3, r1, r3
 80202e2:	2001      	movs	r0, #1
 80202e4:	469e      	mov	lr, r3
 80202e6:	2d00      	cmp	r5, #0
 80202e8:	d0e0      	beq.n	80202ac <__udivmoddi4+0xa4>
 80202ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80202ee:	e7dd      	b.n	80202ac <__udivmoddi4+0xa4>
 80202f0:	b902      	cbnz	r2, 80202f4 <__udivmoddi4+0xec>
 80202f2:	deff      	udf	#255	; 0xff
 80202f4:	fab2 f282 	clz	r2, r2
 80202f8:	2a00      	cmp	r2, #0
 80202fa:	f040 8092 	bne.w	8020422 <__udivmoddi4+0x21a>
 80202fe:	eba1 010c 	sub.w	r1, r1, ip
 8020302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020306:	fa1f fe8c 	uxth.w	lr, ip
 802030a:	2601      	movs	r6, #1
 802030c:	0c20      	lsrs	r0, r4, #16
 802030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8020312:	fb07 1113 	mls	r1, r7, r3, r1
 8020316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 802031a:	fb0e f003 	mul.w	r0, lr, r3
 802031e:	4288      	cmp	r0, r1
 8020320:	d908      	bls.n	8020334 <__udivmoddi4+0x12c>
 8020322:	eb1c 0101 	adds.w	r1, ip, r1
 8020326:	f103 38ff 	add.w	r8, r3, #4294967295
 802032a:	d202      	bcs.n	8020332 <__udivmoddi4+0x12a>
 802032c:	4288      	cmp	r0, r1
 802032e:	f200 80cb 	bhi.w	80204c8 <__udivmoddi4+0x2c0>
 8020332:	4643      	mov	r3, r8
 8020334:	1a09      	subs	r1, r1, r0
 8020336:	b2a4      	uxth	r4, r4
 8020338:	fbb1 f0f7 	udiv	r0, r1, r7
 802033c:	fb07 1110 	mls	r1, r7, r0, r1
 8020340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8020344:	fb0e fe00 	mul.w	lr, lr, r0
 8020348:	45a6      	cmp	lr, r4
 802034a:	d908      	bls.n	802035e <__udivmoddi4+0x156>
 802034c:	eb1c 0404 	adds.w	r4, ip, r4
 8020350:	f100 31ff 	add.w	r1, r0, #4294967295
 8020354:	d202      	bcs.n	802035c <__udivmoddi4+0x154>
 8020356:	45a6      	cmp	lr, r4
 8020358:	f200 80bb 	bhi.w	80204d2 <__udivmoddi4+0x2ca>
 802035c:	4608      	mov	r0, r1
 802035e:	eba4 040e 	sub.w	r4, r4, lr
 8020362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8020366:	e79c      	b.n	80202a2 <__udivmoddi4+0x9a>
 8020368:	f1c6 0720 	rsb	r7, r6, #32
 802036c:	40b3      	lsls	r3, r6
 802036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8020372:	ea4c 0c03 	orr.w	ip, ip, r3
 8020376:	fa20 f407 	lsr.w	r4, r0, r7
 802037a:	fa01 f306 	lsl.w	r3, r1, r6
 802037e:	431c      	orrs	r4, r3
 8020380:	40f9      	lsrs	r1, r7
 8020382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020386:	fa00 f306 	lsl.w	r3, r0, r6
 802038a:	fbb1 f8f9 	udiv	r8, r1, r9
 802038e:	0c20      	lsrs	r0, r4, #16
 8020390:	fa1f fe8c 	uxth.w	lr, ip
 8020394:	fb09 1118 	mls	r1, r9, r8, r1
 8020398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 802039c:	fb08 f00e 	mul.w	r0, r8, lr
 80203a0:	4288      	cmp	r0, r1
 80203a2:	fa02 f206 	lsl.w	r2, r2, r6
 80203a6:	d90b      	bls.n	80203c0 <__udivmoddi4+0x1b8>
 80203a8:	eb1c 0101 	adds.w	r1, ip, r1
 80203ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80203b0:	f080 8088 	bcs.w	80204c4 <__udivmoddi4+0x2bc>
 80203b4:	4288      	cmp	r0, r1
 80203b6:	f240 8085 	bls.w	80204c4 <__udivmoddi4+0x2bc>
 80203ba:	f1a8 0802 	sub.w	r8, r8, #2
 80203be:	4461      	add	r1, ip
 80203c0:	1a09      	subs	r1, r1, r0
 80203c2:	b2a4      	uxth	r4, r4
 80203c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80203c8:	fb09 1110 	mls	r1, r9, r0, r1
 80203cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80203d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80203d4:	458e      	cmp	lr, r1
 80203d6:	d908      	bls.n	80203ea <__udivmoddi4+0x1e2>
 80203d8:	eb1c 0101 	adds.w	r1, ip, r1
 80203dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80203e0:	d26c      	bcs.n	80204bc <__udivmoddi4+0x2b4>
 80203e2:	458e      	cmp	lr, r1
 80203e4:	d96a      	bls.n	80204bc <__udivmoddi4+0x2b4>
 80203e6:	3802      	subs	r0, #2
 80203e8:	4461      	add	r1, ip
 80203ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80203ee:	fba0 9402 	umull	r9, r4, r0, r2
 80203f2:	eba1 010e 	sub.w	r1, r1, lr
 80203f6:	42a1      	cmp	r1, r4
 80203f8:	46c8      	mov	r8, r9
 80203fa:	46a6      	mov	lr, r4
 80203fc:	d356      	bcc.n	80204ac <__udivmoddi4+0x2a4>
 80203fe:	d053      	beq.n	80204a8 <__udivmoddi4+0x2a0>
 8020400:	b15d      	cbz	r5, 802041a <__udivmoddi4+0x212>
 8020402:	ebb3 0208 	subs.w	r2, r3, r8
 8020406:	eb61 010e 	sbc.w	r1, r1, lr
 802040a:	fa01 f707 	lsl.w	r7, r1, r7
 802040e:	fa22 f306 	lsr.w	r3, r2, r6
 8020412:	40f1      	lsrs	r1, r6
 8020414:	431f      	orrs	r7, r3
 8020416:	e9c5 7100 	strd	r7, r1, [r5]
 802041a:	2600      	movs	r6, #0
 802041c:	4631      	mov	r1, r6
 802041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020422:	f1c2 0320 	rsb	r3, r2, #32
 8020426:	40d8      	lsrs	r0, r3
 8020428:	fa0c fc02 	lsl.w	ip, ip, r2
 802042c:	fa21 f303 	lsr.w	r3, r1, r3
 8020430:	4091      	lsls	r1, r2
 8020432:	4301      	orrs	r1, r0
 8020434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020438:	fa1f fe8c 	uxth.w	lr, ip
 802043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8020440:	fb07 3610 	mls	r6, r7, r0, r3
 8020444:	0c0b      	lsrs	r3, r1, #16
 8020446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 802044a:	fb00 f60e 	mul.w	r6, r0, lr
 802044e:	429e      	cmp	r6, r3
 8020450:	fa04 f402 	lsl.w	r4, r4, r2
 8020454:	d908      	bls.n	8020468 <__udivmoddi4+0x260>
 8020456:	eb1c 0303 	adds.w	r3, ip, r3
 802045a:	f100 38ff 	add.w	r8, r0, #4294967295
 802045e:	d22f      	bcs.n	80204c0 <__udivmoddi4+0x2b8>
 8020460:	429e      	cmp	r6, r3
 8020462:	d92d      	bls.n	80204c0 <__udivmoddi4+0x2b8>
 8020464:	3802      	subs	r0, #2
 8020466:	4463      	add	r3, ip
 8020468:	1b9b      	subs	r3, r3, r6
 802046a:	b289      	uxth	r1, r1
 802046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8020470:	fb07 3316 	mls	r3, r7, r6, r3
 8020474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020478:	fb06 f30e 	mul.w	r3, r6, lr
 802047c:	428b      	cmp	r3, r1
 802047e:	d908      	bls.n	8020492 <__udivmoddi4+0x28a>
 8020480:	eb1c 0101 	adds.w	r1, ip, r1
 8020484:	f106 38ff 	add.w	r8, r6, #4294967295
 8020488:	d216      	bcs.n	80204b8 <__udivmoddi4+0x2b0>
 802048a:	428b      	cmp	r3, r1
 802048c:	d914      	bls.n	80204b8 <__udivmoddi4+0x2b0>
 802048e:	3e02      	subs	r6, #2
 8020490:	4461      	add	r1, ip
 8020492:	1ac9      	subs	r1, r1, r3
 8020494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020498:	e738      	b.n	802030c <__udivmoddi4+0x104>
 802049a:	462e      	mov	r6, r5
 802049c:	4628      	mov	r0, r5
 802049e:	e705      	b.n	80202ac <__udivmoddi4+0xa4>
 80204a0:	4606      	mov	r6, r0
 80204a2:	e6e3      	b.n	802026c <__udivmoddi4+0x64>
 80204a4:	4618      	mov	r0, r3
 80204a6:	e6f8      	b.n	802029a <__udivmoddi4+0x92>
 80204a8:	454b      	cmp	r3, r9
 80204aa:	d2a9      	bcs.n	8020400 <__udivmoddi4+0x1f8>
 80204ac:	ebb9 0802 	subs.w	r8, r9, r2
 80204b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80204b4:	3801      	subs	r0, #1
 80204b6:	e7a3      	b.n	8020400 <__udivmoddi4+0x1f8>
 80204b8:	4646      	mov	r6, r8
 80204ba:	e7ea      	b.n	8020492 <__udivmoddi4+0x28a>
 80204bc:	4620      	mov	r0, r4
 80204be:	e794      	b.n	80203ea <__udivmoddi4+0x1e2>
 80204c0:	4640      	mov	r0, r8
 80204c2:	e7d1      	b.n	8020468 <__udivmoddi4+0x260>
 80204c4:	46d0      	mov	r8, sl
 80204c6:	e77b      	b.n	80203c0 <__udivmoddi4+0x1b8>
 80204c8:	3b02      	subs	r3, #2
 80204ca:	4461      	add	r1, ip
 80204cc:	e732      	b.n	8020334 <__udivmoddi4+0x12c>
 80204ce:	4630      	mov	r0, r6
 80204d0:	e709      	b.n	80202e6 <__udivmoddi4+0xde>
 80204d2:	4464      	add	r4, ip
 80204d4:	3802      	subs	r0, #2
 80204d6:	e742      	b.n	802035e <__udivmoddi4+0x156>

080204d8 <__aeabi_idiv0>:
 80204d8:	4770      	bx	lr
 80204da:	bf00      	nop

080204dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80204dc:	b580      	push	{r7, lr}
 80204de:	b082      	sub	sp, #8
 80204e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80204e2:	f000 fa25 	bl	8020930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80204e6:	f000 f861 	bl	80205ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80204ea:	f000 f8f3 	bl	80206d4 <MX_GPIO_Init>
  MX_UART4_Init();
 80204ee:	f000 f8c7 	bl	8020680 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart4, &Mode ,strlen(Mode) , 100);
 80204f2:	4825      	ldr	r0, [pc, #148]	; (8020588 <main+0xac>)
 80204f4:	f7ff fe68 	bl	80201c8 <strlen>
 80204f8:	4603      	mov	r3, r0
 80204fa:	b29a      	uxth	r2, r3
 80204fc:	2364      	movs	r3, #100	; 0x64
 80204fe:	4922      	ldr	r1, [pc, #136]	; (8020588 <main+0xac>)
 8020500:	4822      	ldr	r0, [pc, #136]	; (802058c <main+0xb0>)
 8020502:	f001 fb24 	bl	8021b4e <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_UART_Receive(&huart4, &rxData, 3, 100)==HAL_OK){
 8020506:	2364      	movs	r3, #100	; 0x64
 8020508:	2203      	movs	r2, #3
 802050a:	4921      	ldr	r1, [pc, #132]	; (8020590 <main+0xb4>)
 802050c:	481f      	ldr	r0, [pc, #124]	; (802058c <main+0xb0>)
 802050e:	f001 fbb0 	bl	8021c72 <HAL_UART_Receive>
 8020512:	4603      	mov	r3, r0
 8020514:	2b00      	cmp	r3, #0
 8020516:	d1f6      	bne.n	8020506 <main+0x2a>
		  if(memcmp(rxData,"Rbt",3)==0){
 8020518:	2203      	movs	r2, #3
 802051a:	491e      	ldr	r1, [pc, #120]	; (8020594 <main+0xb8>)
 802051c:	481c      	ldr	r0, [pc, #112]	; (8020590 <main+0xb4>)
 802051e:	f001 ff51 	bl	80223c4 <memcmp>
 8020522:	4603      	mov	r3, r0
 8020524:	2b00      	cmp	r3, #0
 8020526:	d121      	bne.n	802056c <main+0x90>
			  HAL_UART_Transmit(&huart4, &back, strlen(back), 300);
 8020528:	481b      	ldr	r0, [pc, #108]	; (8020598 <main+0xbc>)
 802052a:	f7ff fe4d 	bl	80201c8 <strlen>
 802052e:	4603      	mov	r3, r0
 8020530:	b29a      	uxth	r2, r3
 8020532:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8020536:	4918      	ldr	r1, [pc, #96]	; (8020598 <main+0xbc>)
 8020538:	4814      	ldr	r0, [pc, #80]	; (802058c <main+0xb0>)
 802053a:	f001 fb08 	bl	8021b4e <HAL_UART_Transmit>
			  HAL_RCC_DeInit();
 802053e:	f001 f9eb 	bl	8021918 <HAL_RCC_DeInit>

			  /* Clear Pending Interrupt Request, turn  off System Tick*/
			  HAL_DeInit();
 8020542:	f000 fa17 	bl	8020974 <HAL_DeInit>
			  SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |\
 8020546:	4b15      	ldr	r3, [pc, #84]	; (802059c <main+0xc0>)
 8020548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802054a:	4a14      	ldr	r2, [pc, #80]	; (802059c <main+0xc0>)
 802054c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8020550:	6253      	str	r3, [r2, #36]	; 0x24
			       SCB_SHCSR_BUSFAULTENA_Msk | \
			       SCB_SHCSR_MEMFAULTENA_Msk ) ;


			  pFunction app_reset_handler = (pFunction)(*(__IO uint32_t*)(0x08000000 + 4));
 8020552:	4b13      	ldr	r3, [pc, #76]	; (80205a0 <main+0xc4>)
 8020554:	681b      	ldr	r3, [r3, #0]
 8020556:	607b      	str	r3, [r7, #4]
			  __set_MSP(*(__IO uint32_t*)0x08000000);
 8020558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8020560:	683b      	ldr	r3, [r7, #0]
 8020562:	f383 8808 	msr	MSP, r3
}
 8020566:	bf00      	nop
			  app_reset_handler();
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	4798      	blx	r3
		  }
		  if(memcmp(rxData,"111",3)==0){
 802056c:	2203      	movs	r2, #3
 802056e:	490d      	ldr	r1, [pc, #52]	; (80205a4 <main+0xc8>)
 8020570:	4807      	ldr	r0, [pc, #28]	; (8020590 <main+0xb4>)
 8020572:	f001 ff27 	bl	80223c4 <memcmp>
 8020576:	4603      	mov	r3, r0
 8020578:	2b00      	cmp	r3, #0
 802057a:	d1c4      	bne.n	8020506 <main+0x2a>
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 802057c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020580:	4809      	ldr	r0, [pc, #36]	; (80205a8 <main+0xcc>)
 8020582:	f000 fd16 	bl	8020fb2 <HAL_GPIO_TogglePin>
	  if(HAL_UART_Receive(&huart4, &rxData, 3, 100)==HAL_OK){
 8020586:	e7be      	b.n	8020506 <main+0x2a>
 8020588:	20000000 	.word	0x20000000
 802058c:	2000005c 	.word	0x2000005c
 8020590:	200000a0 	.word	0x200000a0
 8020594:	0802240c 	.word	0x0802240c
 8020598:	20000020 	.word	0x20000020
 802059c:	e000ed00 	.word	0xe000ed00
 80205a0:	08000004 	.word	0x08000004
 80205a4:	08022410 	.word	0x08022410
 80205a8:	40020c00 	.word	0x40020c00

080205ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	b094      	sub	sp, #80	; 0x50
 80205b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205b2:	f107 0320 	add.w	r3, r7, #32
 80205b6:	2230      	movs	r2, #48	; 0x30
 80205b8:	2100      	movs	r1, #0
 80205ba:	4618      	mov	r0, r3
 80205bc:	f001 ff12 	bl	80223e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205c0:	f107 030c 	add.w	r3, r7, #12
 80205c4:	2200      	movs	r2, #0
 80205c6:	601a      	str	r2, [r3, #0]
 80205c8:	605a      	str	r2, [r3, #4]
 80205ca:	609a      	str	r2, [r3, #8]
 80205cc:	60da      	str	r2, [r3, #12]
 80205ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80205d0:	2300      	movs	r3, #0
 80205d2:	60bb      	str	r3, [r7, #8]
 80205d4:	4b28      	ldr	r3, [pc, #160]	; (8020678 <SystemClock_Config+0xcc>)
 80205d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205d8:	4a27      	ldr	r2, [pc, #156]	; (8020678 <SystemClock_Config+0xcc>)
 80205da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80205de:	6413      	str	r3, [r2, #64]	; 0x40
 80205e0:	4b25      	ldr	r3, [pc, #148]	; (8020678 <SystemClock_Config+0xcc>)
 80205e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80205e8:	60bb      	str	r3, [r7, #8]
 80205ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80205ec:	2300      	movs	r3, #0
 80205ee:	607b      	str	r3, [r7, #4]
 80205f0:	4b22      	ldr	r3, [pc, #136]	; (802067c <SystemClock_Config+0xd0>)
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	4a21      	ldr	r2, [pc, #132]	; (802067c <SystemClock_Config+0xd0>)
 80205f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80205fa:	6013      	str	r3, [r2, #0]
 80205fc:	4b1f      	ldr	r3, [pc, #124]	; (802067c <SystemClock_Config+0xd0>)
 80205fe:	681b      	ldr	r3, [r3, #0]
 8020600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020604:	607b      	str	r3, [r7, #4]
 8020606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020608:	2301      	movs	r3, #1
 802060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802060c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020612:	2302      	movs	r3, #2
 8020614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 802061c:	2304      	movs	r3, #4
 802061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8020620:	23a8      	movs	r3, #168	; 0xa8
 8020622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020624:	2302      	movs	r3, #2
 8020626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8020628:	2304      	movs	r3, #4
 802062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802062c:	f107 0320 	add.w	r3, r7, #32
 8020630:	4618      	mov	r0, r3
 8020632:	f000 fcd9 	bl	8020fe8 <HAL_RCC_OscConfig>
 8020636:	4603      	mov	r3, r0
 8020638:	2b00      	cmp	r3, #0
 802063a:	d001      	beq.n	8020640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 802063c:	f000 f89c 	bl	8020778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020640:	230f      	movs	r3, #15
 8020642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020644:	2302      	movs	r3, #2
 8020646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020648:	2300      	movs	r3, #0
 802064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802064c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8020652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020658:	f107 030c 	add.w	r3, r7, #12
 802065c:	2105      	movs	r1, #5
 802065e:	4618      	mov	r0, r3
 8020660:	f000 ff3a 	bl	80214d8 <HAL_RCC_ClockConfig>
 8020664:	4603      	mov	r3, r0
 8020666:	2b00      	cmp	r3, #0
 8020668:	d001      	beq.n	802066e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 802066a:	f000 f885 	bl	8020778 <Error_Handler>
  }
}
 802066e:	bf00      	nop
 8020670:	3750      	adds	r7, #80	; 0x50
 8020672:	46bd      	mov	sp, r7
 8020674:	bd80      	pop	{r7, pc}
 8020676:	bf00      	nop
 8020678:	40023800 	.word	0x40023800
 802067c:	40007000 	.word	0x40007000

08020680 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8020680:	b580      	push	{r7, lr}
 8020682:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8020684:	4b11      	ldr	r3, [pc, #68]	; (80206cc <MX_UART4_Init+0x4c>)
 8020686:	4a12      	ldr	r2, [pc, #72]	; (80206d0 <MX_UART4_Init+0x50>)
 8020688:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802068a:	4b10      	ldr	r3, [pc, #64]	; (80206cc <MX_UART4_Init+0x4c>)
 802068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020690:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8020692:	4b0e      	ldr	r3, [pc, #56]	; (80206cc <MX_UART4_Init+0x4c>)
 8020694:	2200      	movs	r2, #0
 8020696:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8020698:	4b0c      	ldr	r3, [pc, #48]	; (80206cc <MX_UART4_Init+0x4c>)
 802069a:	2200      	movs	r2, #0
 802069c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 802069e:	4b0b      	ldr	r3, [pc, #44]	; (80206cc <MX_UART4_Init+0x4c>)
 80206a0:	2200      	movs	r2, #0
 80206a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80206a4:	4b09      	ldr	r3, [pc, #36]	; (80206cc <MX_UART4_Init+0x4c>)
 80206a6:	220c      	movs	r2, #12
 80206a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80206aa:	4b08      	ldr	r3, [pc, #32]	; (80206cc <MX_UART4_Init+0x4c>)
 80206ac:	2200      	movs	r2, #0
 80206ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80206b0:	4b06      	ldr	r3, [pc, #24]	; (80206cc <MX_UART4_Init+0x4c>)
 80206b2:	2200      	movs	r2, #0
 80206b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80206b6:	4805      	ldr	r0, [pc, #20]	; (80206cc <MX_UART4_Init+0x4c>)
 80206b8:	f001 f9fc 	bl	8021ab4 <HAL_UART_Init>
 80206bc:	4603      	mov	r3, r0
 80206be:	2b00      	cmp	r3, #0
 80206c0:	d001      	beq.n	80206c6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80206c2:	f000 f859 	bl	8020778 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80206c6:	bf00      	nop
 80206c8:	bd80      	pop	{r7, pc}
 80206ca:	bf00      	nop
 80206cc:	2000005c 	.word	0x2000005c
 80206d0:	40004c00 	.word	0x40004c00

080206d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80206d4:	b580      	push	{r7, lr}
 80206d6:	b088      	sub	sp, #32
 80206d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80206da:	f107 030c 	add.w	r3, r7, #12
 80206de:	2200      	movs	r2, #0
 80206e0:	601a      	str	r2, [r3, #0]
 80206e2:	605a      	str	r2, [r3, #4]
 80206e4:	609a      	str	r2, [r3, #8]
 80206e6:	60da      	str	r2, [r3, #12]
 80206e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80206ea:	2300      	movs	r3, #0
 80206ec:	60bb      	str	r3, [r7, #8]
 80206ee:	4b20      	ldr	r3, [pc, #128]	; (8020770 <MX_GPIO_Init+0x9c>)
 80206f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80206f2:	4a1f      	ldr	r2, [pc, #124]	; (8020770 <MX_GPIO_Init+0x9c>)
 80206f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80206f8:	6313      	str	r3, [r2, #48]	; 0x30
 80206fa:	4b1d      	ldr	r3, [pc, #116]	; (8020770 <MX_GPIO_Init+0x9c>)
 80206fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80206fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020702:	60bb      	str	r3, [r7, #8]
 8020704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020706:	2300      	movs	r3, #0
 8020708:	607b      	str	r3, [r7, #4]
 802070a:	4b19      	ldr	r3, [pc, #100]	; (8020770 <MX_GPIO_Init+0x9c>)
 802070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802070e:	4a18      	ldr	r2, [pc, #96]	; (8020770 <MX_GPIO_Init+0x9c>)
 8020710:	f043 0301 	orr.w	r3, r3, #1
 8020714:	6313      	str	r3, [r2, #48]	; 0x30
 8020716:	4b16      	ldr	r3, [pc, #88]	; (8020770 <MX_GPIO_Init+0x9c>)
 8020718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802071a:	f003 0301 	and.w	r3, r3, #1
 802071e:	607b      	str	r3, [r7, #4]
 8020720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020722:	2300      	movs	r3, #0
 8020724:	603b      	str	r3, [r7, #0]
 8020726:	4b12      	ldr	r3, [pc, #72]	; (8020770 <MX_GPIO_Init+0x9c>)
 8020728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802072a:	4a11      	ldr	r2, [pc, #68]	; (8020770 <MX_GPIO_Init+0x9c>)
 802072c:	f043 0308 	orr.w	r3, r3, #8
 8020730:	6313      	str	r3, [r2, #48]	; 0x30
 8020732:	4b0f      	ldr	r3, [pc, #60]	; (8020770 <MX_GPIO_Init+0x9c>)
 8020734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020736:	f003 0308 	and.w	r3, r3, #8
 802073a:	603b      	str	r3, [r7, #0]
 802073c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 802073e:	2200      	movs	r2, #0
 8020740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020744:	480b      	ldr	r0, [pc, #44]	; (8020774 <MX_GPIO_Init+0xa0>)
 8020746:	f000 fc1b 	bl	8020f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 802074a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020750:	2301      	movs	r3, #1
 8020752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020754:	2300      	movs	r3, #0
 8020756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020758:	2300      	movs	r3, #0
 802075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802075c:	f107 030c 	add.w	r3, r7, #12
 8020760:	4619      	mov	r1, r3
 8020762:	4804      	ldr	r0, [pc, #16]	; (8020774 <MX_GPIO_Init+0xa0>)
 8020764:	f000 fa70 	bl	8020c48 <HAL_GPIO_Init>

}
 8020768:	bf00      	nop
 802076a:	3720      	adds	r7, #32
 802076c:	46bd      	mov	sp, r7
 802076e:	bd80      	pop	{r7, pc}
 8020770:	40023800 	.word	0x40023800
 8020774:	40020c00 	.word	0x40020c00

08020778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020778:	b480      	push	{r7}
 802077a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802077c:	b672      	cpsid	i
}
 802077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020780:	e7fe      	b.n	8020780 <Error_Handler+0x8>
	...

08020784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020784:	b480      	push	{r7}
 8020786:	b083      	sub	sp, #12
 8020788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802078a:	2300      	movs	r3, #0
 802078c:	607b      	str	r3, [r7, #4]
 802078e:	4b10      	ldr	r3, [pc, #64]	; (80207d0 <HAL_MspInit+0x4c>)
 8020790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020792:	4a0f      	ldr	r2, [pc, #60]	; (80207d0 <HAL_MspInit+0x4c>)
 8020794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020798:	6453      	str	r3, [r2, #68]	; 0x44
 802079a:	4b0d      	ldr	r3, [pc, #52]	; (80207d0 <HAL_MspInit+0x4c>)
 802079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80207a2:	607b      	str	r3, [r7, #4]
 80207a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80207a6:	2300      	movs	r3, #0
 80207a8:	603b      	str	r3, [r7, #0]
 80207aa:	4b09      	ldr	r3, [pc, #36]	; (80207d0 <HAL_MspInit+0x4c>)
 80207ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80207ae:	4a08      	ldr	r2, [pc, #32]	; (80207d0 <HAL_MspInit+0x4c>)
 80207b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80207b4:	6413      	str	r3, [r2, #64]	; 0x40
 80207b6:	4b06      	ldr	r3, [pc, #24]	; (80207d0 <HAL_MspInit+0x4c>)
 80207b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80207ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80207be:	603b      	str	r3, [r7, #0]
 80207c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80207c2:	bf00      	nop
 80207c4:	370c      	adds	r7, #12
 80207c6:	46bd      	mov	sp, r7
 80207c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207cc:	4770      	bx	lr
 80207ce:	bf00      	nop
 80207d0:	40023800 	.word	0x40023800

080207d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80207d4:	b580      	push	{r7, lr}
 80207d6:	b08a      	sub	sp, #40	; 0x28
 80207d8:	af00      	add	r7, sp, #0
 80207da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80207dc:	f107 0314 	add.w	r3, r7, #20
 80207e0:	2200      	movs	r2, #0
 80207e2:	601a      	str	r2, [r3, #0]
 80207e4:	605a      	str	r2, [r3, #4]
 80207e6:	609a      	str	r2, [r3, #8]
 80207e8:	60da      	str	r2, [r3, #12]
 80207ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80207ec:	687b      	ldr	r3, [r7, #4]
 80207ee:	681b      	ldr	r3, [r3, #0]
 80207f0:	4a19      	ldr	r2, [pc, #100]	; (8020858 <HAL_UART_MspInit+0x84>)
 80207f2:	4293      	cmp	r3, r2
 80207f4:	d12b      	bne.n	802084e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80207f6:	2300      	movs	r3, #0
 80207f8:	613b      	str	r3, [r7, #16]
 80207fa:	4b18      	ldr	r3, [pc, #96]	; (802085c <HAL_UART_MspInit+0x88>)
 80207fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80207fe:	4a17      	ldr	r2, [pc, #92]	; (802085c <HAL_UART_MspInit+0x88>)
 8020800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8020804:	6413      	str	r3, [r2, #64]	; 0x40
 8020806:	4b15      	ldr	r3, [pc, #84]	; (802085c <HAL_UART_MspInit+0x88>)
 8020808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802080a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802080e:	613b      	str	r3, [r7, #16]
 8020810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020812:	2300      	movs	r3, #0
 8020814:	60fb      	str	r3, [r7, #12]
 8020816:	4b11      	ldr	r3, [pc, #68]	; (802085c <HAL_UART_MspInit+0x88>)
 8020818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802081a:	4a10      	ldr	r2, [pc, #64]	; (802085c <HAL_UART_MspInit+0x88>)
 802081c:	f043 0301 	orr.w	r3, r3, #1
 8020820:	6313      	str	r3, [r2, #48]	; 0x30
 8020822:	4b0e      	ldr	r3, [pc, #56]	; (802085c <HAL_UART_MspInit+0x88>)
 8020824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020826:	f003 0301 	and.w	r3, r3, #1
 802082a:	60fb      	str	r3, [r7, #12]
 802082c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802082e:	2303      	movs	r3, #3
 8020830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020832:	2302      	movs	r3, #2
 8020834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020836:	2300      	movs	r3, #0
 8020838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802083a:	2303      	movs	r3, #3
 802083c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802083e:	2308      	movs	r3, #8
 8020840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020842:	f107 0314 	add.w	r3, r7, #20
 8020846:	4619      	mov	r1, r3
 8020848:	4805      	ldr	r0, [pc, #20]	; (8020860 <HAL_UART_MspInit+0x8c>)
 802084a:	f000 f9fd 	bl	8020c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 802084e:	bf00      	nop
 8020850:	3728      	adds	r7, #40	; 0x28
 8020852:	46bd      	mov	sp, r7
 8020854:	bd80      	pop	{r7, pc}
 8020856:	bf00      	nop
 8020858:	40004c00 	.word	0x40004c00
 802085c:	40023800 	.word	0x40023800
 8020860:	40020000 	.word	0x40020000

08020864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020864:	b480      	push	{r7}
 8020866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020868:	e7fe      	b.n	8020868 <NMI_Handler+0x4>

0802086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802086a:	b480      	push	{r7}
 802086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802086e:	e7fe      	b.n	802086e <HardFault_Handler+0x4>

08020870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020870:	b480      	push	{r7}
 8020872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020874:	e7fe      	b.n	8020874 <MemManage_Handler+0x4>

08020876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020876:	b480      	push	{r7}
 8020878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802087a:	e7fe      	b.n	802087a <BusFault_Handler+0x4>

0802087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802087c:	b480      	push	{r7}
 802087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020880:	e7fe      	b.n	8020880 <UsageFault_Handler+0x4>

08020882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020882:	b480      	push	{r7}
 8020884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020886:	bf00      	nop
 8020888:	46bd      	mov	sp, r7
 802088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802088e:	4770      	bx	lr

08020890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020890:	b480      	push	{r7}
 8020892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020894:	bf00      	nop
 8020896:	46bd      	mov	sp, r7
 8020898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802089c:	4770      	bx	lr

0802089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802089e:	b480      	push	{r7}
 80208a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80208a2:	bf00      	nop
 80208a4:	46bd      	mov	sp, r7
 80208a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208aa:	4770      	bx	lr

080208ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80208ac:	b580      	push	{r7, lr}
 80208ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80208b0:	f000 f8c4 	bl	8020a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80208b4:	bf00      	nop
 80208b6:	bd80      	pop	{r7, pc}

080208b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80208b8:	b480      	push	{r7}
 80208ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80208bc:	4b06      	ldr	r3, [pc, #24]	; (80208d8 <SystemInit+0x20>)
 80208be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80208c2:	4a05      	ldr	r2, [pc, #20]	; (80208d8 <SystemInit+0x20>)
 80208c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80208c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80208cc:	bf00      	nop
 80208ce:	46bd      	mov	sp, r7
 80208d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208d4:	4770      	bx	lr
 80208d6:	bf00      	nop
 80208d8:	e000ed00 	.word	0xe000ed00

080208dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80208dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80208e0:	480d      	ldr	r0, [pc, #52]	; (8020918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80208e2:	490e      	ldr	r1, [pc, #56]	; (802091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80208e4:	4a0e      	ldr	r2, [pc, #56]	; (8020920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80208e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80208e8:	e002      	b.n	80208f0 <LoopCopyDataInit>

080208ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80208ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80208ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80208ee:	3304      	adds	r3, #4

080208f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80208f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80208f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80208f4:	d3f9      	bcc.n	80208ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80208f6:	4a0b      	ldr	r2, [pc, #44]	; (8020924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80208f8:	4c0b      	ldr	r4, [pc, #44]	; (8020928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80208fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80208fc:	e001      	b.n	8020902 <LoopFillZerobss>

080208fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80208fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020900:	3204      	adds	r2, #4

08020902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020904:	d3fb      	bcc.n	80208fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8020906:	f7ff ffd7 	bl	80208b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802090a:	f001 fd37 	bl	802237c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802090e:	f7ff fde5 	bl	80204dc <main>
  bx  lr    
 8020912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8020914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802091c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8020920:	0802243c 	.word	0x0802243c
  ldr r2, =_sbss
 8020924:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8020928:	200000a8 	.word	0x200000a8

0802092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802092c:	e7fe      	b.n	802092c <ADC_IRQHandler>
	...

08020930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020930:	b580      	push	{r7, lr}
 8020932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020934:	4b0e      	ldr	r3, [pc, #56]	; (8020970 <HAL_Init+0x40>)
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	4a0d      	ldr	r2, [pc, #52]	; (8020970 <HAL_Init+0x40>)
 802093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020940:	4b0b      	ldr	r3, [pc, #44]	; (8020970 <HAL_Init+0x40>)
 8020942:	681b      	ldr	r3, [r3, #0]
 8020944:	4a0a      	ldr	r2, [pc, #40]	; (8020970 <HAL_Init+0x40>)
 8020946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802094c:	4b08      	ldr	r3, [pc, #32]	; (8020970 <HAL_Init+0x40>)
 802094e:	681b      	ldr	r3, [r3, #0]
 8020950:	4a07      	ldr	r2, [pc, #28]	; (8020970 <HAL_Init+0x40>)
 8020952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020958:	2003      	movs	r0, #3
 802095a:	f000 f941 	bl	8020be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802095e:	200f      	movs	r0, #15
 8020960:	f000 f83c 	bl	80209dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020964:	f7ff ff0e 	bl	8020784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020968:	2300      	movs	r3, #0
}
 802096a:	4618      	mov	r0, r3
 802096c:	bd80      	pop	{r7, pc}
 802096e:	bf00      	nop
 8020970:	40023c00 	.word	0x40023c00

08020974 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8020974:	b580      	push	{r7, lr}
 8020976:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8020978:	4b13      	ldr	r3, [pc, #76]	; (80209c8 <HAL_DeInit+0x54>)
 802097a:	f04f 32ff 	mov.w	r2, #4294967295
 802097e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8020980:	4b11      	ldr	r3, [pc, #68]	; (80209c8 <HAL_DeInit+0x54>)
 8020982:	2200      	movs	r2, #0
 8020984:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8020986:	4b10      	ldr	r3, [pc, #64]	; (80209c8 <HAL_DeInit+0x54>)
 8020988:	f04f 32ff 	mov.w	r2, #4294967295
 802098c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 802098e:	4b0e      	ldr	r3, [pc, #56]	; (80209c8 <HAL_DeInit+0x54>)
 8020990:	2200      	movs	r2, #0
 8020992:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8020994:	4b0c      	ldr	r3, [pc, #48]	; (80209c8 <HAL_DeInit+0x54>)
 8020996:	f04f 32ff 	mov.w	r2, #4294967295
 802099a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 802099c:	4b0a      	ldr	r3, [pc, #40]	; (80209c8 <HAL_DeInit+0x54>)
 802099e:	2200      	movs	r2, #0
 80209a0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80209a2:	4b09      	ldr	r3, [pc, #36]	; (80209c8 <HAL_DeInit+0x54>)
 80209a4:	f04f 32ff 	mov.w	r2, #4294967295
 80209a8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80209aa:	4b07      	ldr	r3, [pc, #28]	; (80209c8 <HAL_DeInit+0x54>)
 80209ac:	2200      	movs	r2, #0
 80209ae:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80209b0:	4b05      	ldr	r3, [pc, #20]	; (80209c8 <HAL_DeInit+0x54>)
 80209b2:	f04f 32ff 	mov.w	r2, #4294967295
 80209b6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80209b8:	4b03      	ldr	r3, [pc, #12]	; (80209c8 <HAL_DeInit+0x54>)
 80209ba:	2200      	movs	r2, #0
 80209bc:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80209be:	f000 f805 	bl	80209cc <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80209c2:	2300      	movs	r3, #0
}
 80209c4:	4618      	mov	r0, r3
 80209c6:	bd80      	pop	{r7, pc}
 80209c8:	40023800 	.word	0x40023800

080209cc <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80209cc:	b480      	push	{r7}
 80209ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80209d0:	bf00      	nop
 80209d2:	46bd      	mov	sp, r7
 80209d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209d8:	4770      	bx	lr
	...

080209dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80209dc:	b580      	push	{r7, lr}
 80209de:	b082      	sub	sp, #8
 80209e0:	af00      	add	r7, sp, #0
 80209e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80209e4:	4b12      	ldr	r3, [pc, #72]	; (8020a30 <HAL_InitTick+0x54>)
 80209e6:	681a      	ldr	r2, [r3, #0]
 80209e8:	4b12      	ldr	r3, [pc, #72]	; (8020a34 <HAL_InitTick+0x58>)
 80209ea:	781b      	ldrb	r3, [r3, #0]
 80209ec:	4619      	mov	r1, r3
 80209ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80209f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80209f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80209fa:	4618      	mov	r0, r3
 80209fc:	f000 f917 	bl	8020c2e <HAL_SYSTICK_Config>
 8020a00:	4603      	mov	r3, r0
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	d001      	beq.n	8020a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020a06:	2301      	movs	r3, #1
 8020a08:	e00e      	b.n	8020a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	2b0f      	cmp	r3, #15
 8020a0e:	d80a      	bhi.n	8020a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020a10:	2200      	movs	r2, #0
 8020a12:	6879      	ldr	r1, [r7, #4]
 8020a14:	f04f 30ff 	mov.w	r0, #4294967295
 8020a18:	f000 f8ed 	bl	8020bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020a1c:	4a06      	ldr	r2, [pc, #24]	; (8020a38 <HAL_InitTick+0x5c>)
 8020a1e:	687b      	ldr	r3, [r7, #4]
 8020a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020a22:	2300      	movs	r3, #0
 8020a24:	e000      	b.n	8020a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020a26:	2301      	movs	r3, #1
}
 8020a28:	4618      	mov	r0, r3
 8020a2a:	3708      	adds	r7, #8
 8020a2c:	46bd      	mov	sp, r7
 8020a2e:	bd80      	pop	{r7, pc}
 8020a30:	20000034 	.word	0x20000034
 8020a34:	2000003c 	.word	0x2000003c
 8020a38:	20000038 	.word	0x20000038

08020a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020a3c:	b480      	push	{r7}
 8020a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020a40:	4b06      	ldr	r3, [pc, #24]	; (8020a5c <HAL_IncTick+0x20>)
 8020a42:	781b      	ldrb	r3, [r3, #0]
 8020a44:	461a      	mov	r2, r3
 8020a46:	4b06      	ldr	r3, [pc, #24]	; (8020a60 <HAL_IncTick+0x24>)
 8020a48:	681b      	ldr	r3, [r3, #0]
 8020a4a:	4413      	add	r3, r2
 8020a4c:	4a04      	ldr	r2, [pc, #16]	; (8020a60 <HAL_IncTick+0x24>)
 8020a4e:	6013      	str	r3, [r2, #0]
}
 8020a50:	bf00      	nop
 8020a52:	46bd      	mov	sp, r7
 8020a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a58:	4770      	bx	lr
 8020a5a:	bf00      	nop
 8020a5c:	2000003c 	.word	0x2000003c
 8020a60:	200000a4 	.word	0x200000a4

08020a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020a64:	b480      	push	{r7}
 8020a66:	af00      	add	r7, sp, #0
  return uwTick;
 8020a68:	4b03      	ldr	r3, [pc, #12]	; (8020a78 <HAL_GetTick+0x14>)
 8020a6a:	681b      	ldr	r3, [r3, #0]
}
 8020a6c:	4618      	mov	r0, r3
 8020a6e:	46bd      	mov	sp, r7
 8020a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a74:	4770      	bx	lr
 8020a76:	bf00      	nop
 8020a78:	200000a4 	.word	0x200000a4

08020a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020a7c:	b480      	push	{r7}
 8020a7e:	b085      	sub	sp, #20
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	f003 0307 	and.w	r3, r3, #7
 8020a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020a8c:	4b0c      	ldr	r3, [pc, #48]	; (8020ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8020a8e:	68db      	ldr	r3, [r3, #12]
 8020a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020a92:	68ba      	ldr	r2, [r7, #8]
 8020a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020a98:	4013      	ands	r3, r2
 8020a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020a9c:	68fb      	ldr	r3, [r7, #12]
 8020a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020aa0:	68bb      	ldr	r3, [r7, #8]
 8020aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020aae:	4a04      	ldr	r2, [pc, #16]	; (8020ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8020ab0:	68bb      	ldr	r3, [r7, #8]
 8020ab2:	60d3      	str	r3, [r2, #12]
}
 8020ab4:	bf00      	nop
 8020ab6:	3714      	adds	r7, #20
 8020ab8:	46bd      	mov	sp, r7
 8020aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020abe:	4770      	bx	lr
 8020ac0:	e000ed00 	.word	0xe000ed00

08020ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020ac4:	b480      	push	{r7}
 8020ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020ac8:	4b04      	ldr	r3, [pc, #16]	; (8020adc <__NVIC_GetPriorityGrouping+0x18>)
 8020aca:	68db      	ldr	r3, [r3, #12]
 8020acc:	0a1b      	lsrs	r3, r3, #8
 8020ace:	f003 0307 	and.w	r3, r3, #7
}
 8020ad2:	4618      	mov	r0, r3
 8020ad4:	46bd      	mov	sp, r7
 8020ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ada:	4770      	bx	lr
 8020adc:	e000ed00 	.word	0xe000ed00

08020ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020ae0:	b480      	push	{r7}
 8020ae2:	b083      	sub	sp, #12
 8020ae4:	af00      	add	r7, sp, #0
 8020ae6:	4603      	mov	r3, r0
 8020ae8:	6039      	str	r1, [r7, #0]
 8020aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020af0:	2b00      	cmp	r3, #0
 8020af2:	db0a      	blt.n	8020b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020af4:	683b      	ldr	r3, [r7, #0]
 8020af6:	b2da      	uxtb	r2, r3
 8020af8:	490c      	ldr	r1, [pc, #48]	; (8020b2c <__NVIC_SetPriority+0x4c>)
 8020afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020afe:	0112      	lsls	r2, r2, #4
 8020b00:	b2d2      	uxtb	r2, r2
 8020b02:	440b      	add	r3, r1
 8020b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020b08:	e00a      	b.n	8020b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b0a:	683b      	ldr	r3, [r7, #0]
 8020b0c:	b2da      	uxtb	r2, r3
 8020b0e:	4908      	ldr	r1, [pc, #32]	; (8020b30 <__NVIC_SetPriority+0x50>)
 8020b10:	79fb      	ldrb	r3, [r7, #7]
 8020b12:	f003 030f 	and.w	r3, r3, #15
 8020b16:	3b04      	subs	r3, #4
 8020b18:	0112      	lsls	r2, r2, #4
 8020b1a:	b2d2      	uxtb	r2, r2
 8020b1c:	440b      	add	r3, r1
 8020b1e:	761a      	strb	r2, [r3, #24]
}
 8020b20:	bf00      	nop
 8020b22:	370c      	adds	r7, #12
 8020b24:	46bd      	mov	sp, r7
 8020b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b2a:	4770      	bx	lr
 8020b2c:	e000e100 	.word	0xe000e100
 8020b30:	e000ed00 	.word	0xe000ed00

08020b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020b34:	b480      	push	{r7}
 8020b36:	b089      	sub	sp, #36	; 0x24
 8020b38:	af00      	add	r7, sp, #0
 8020b3a:	60f8      	str	r0, [r7, #12]
 8020b3c:	60b9      	str	r1, [r7, #8]
 8020b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020b40:	68fb      	ldr	r3, [r7, #12]
 8020b42:	f003 0307 	and.w	r3, r3, #7
 8020b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020b48:	69fb      	ldr	r3, [r7, #28]
 8020b4a:	f1c3 0307 	rsb	r3, r3, #7
 8020b4e:	2b04      	cmp	r3, #4
 8020b50:	bf28      	it	cs
 8020b52:	2304      	movcs	r3, #4
 8020b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020b56:	69fb      	ldr	r3, [r7, #28]
 8020b58:	3304      	adds	r3, #4
 8020b5a:	2b06      	cmp	r3, #6
 8020b5c:	d902      	bls.n	8020b64 <NVIC_EncodePriority+0x30>
 8020b5e:	69fb      	ldr	r3, [r7, #28]
 8020b60:	3b03      	subs	r3, #3
 8020b62:	e000      	b.n	8020b66 <NVIC_EncodePriority+0x32>
 8020b64:	2300      	movs	r3, #0
 8020b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b68:	f04f 32ff 	mov.w	r2, #4294967295
 8020b6c:	69bb      	ldr	r3, [r7, #24]
 8020b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8020b72:	43da      	mvns	r2, r3
 8020b74:	68bb      	ldr	r3, [r7, #8]
 8020b76:	401a      	ands	r2, r3
 8020b78:	697b      	ldr	r3, [r7, #20]
 8020b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8020b80:	697b      	ldr	r3, [r7, #20]
 8020b82:	fa01 f303 	lsl.w	r3, r1, r3
 8020b86:	43d9      	mvns	r1, r3
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b8c:	4313      	orrs	r3, r2
         );
}
 8020b8e:	4618      	mov	r0, r3
 8020b90:	3724      	adds	r7, #36	; 0x24
 8020b92:	46bd      	mov	sp, r7
 8020b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b98:	4770      	bx	lr
	...

08020b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020b9c:	b580      	push	{r7, lr}
 8020b9e:	b082      	sub	sp, #8
 8020ba0:	af00      	add	r7, sp, #0
 8020ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	3b01      	subs	r3, #1
 8020ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020bac:	d301      	bcc.n	8020bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020bae:	2301      	movs	r3, #1
 8020bb0:	e00f      	b.n	8020bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020bb2:	4a0a      	ldr	r2, [pc, #40]	; (8020bdc <SysTick_Config+0x40>)
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	3b01      	subs	r3, #1
 8020bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020bba:	210f      	movs	r1, #15
 8020bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8020bc0:	f7ff ff8e 	bl	8020ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020bc4:	4b05      	ldr	r3, [pc, #20]	; (8020bdc <SysTick_Config+0x40>)
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020bca:	4b04      	ldr	r3, [pc, #16]	; (8020bdc <SysTick_Config+0x40>)
 8020bcc:	2207      	movs	r2, #7
 8020bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020bd0:	2300      	movs	r3, #0
}
 8020bd2:	4618      	mov	r0, r3
 8020bd4:	3708      	adds	r7, #8
 8020bd6:	46bd      	mov	sp, r7
 8020bd8:	bd80      	pop	{r7, pc}
 8020bda:	bf00      	nop
 8020bdc:	e000e010 	.word	0xe000e010

08020be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020be0:	b580      	push	{r7, lr}
 8020be2:	b082      	sub	sp, #8
 8020be4:	af00      	add	r7, sp, #0
 8020be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020be8:	6878      	ldr	r0, [r7, #4]
 8020bea:	f7ff ff47 	bl	8020a7c <__NVIC_SetPriorityGrouping>
}
 8020bee:	bf00      	nop
 8020bf0:	3708      	adds	r7, #8
 8020bf2:	46bd      	mov	sp, r7
 8020bf4:	bd80      	pop	{r7, pc}

08020bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020bf6:	b580      	push	{r7, lr}
 8020bf8:	b086      	sub	sp, #24
 8020bfa:	af00      	add	r7, sp, #0
 8020bfc:	4603      	mov	r3, r0
 8020bfe:	60b9      	str	r1, [r7, #8]
 8020c00:	607a      	str	r2, [r7, #4]
 8020c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020c04:	2300      	movs	r3, #0
 8020c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020c08:	f7ff ff5c 	bl	8020ac4 <__NVIC_GetPriorityGrouping>
 8020c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020c0e:	687a      	ldr	r2, [r7, #4]
 8020c10:	68b9      	ldr	r1, [r7, #8]
 8020c12:	6978      	ldr	r0, [r7, #20]
 8020c14:	f7ff ff8e 	bl	8020b34 <NVIC_EncodePriority>
 8020c18:	4602      	mov	r2, r0
 8020c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020c1e:	4611      	mov	r1, r2
 8020c20:	4618      	mov	r0, r3
 8020c22:	f7ff ff5d 	bl	8020ae0 <__NVIC_SetPriority>
}
 8020c26:	bf00      	nop
 8020c28:	3718      	adds	r7, #24
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	bd80      	pop	{r7, pc}

08020c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020c2e:	b580      	push	{r7, lr}
 8020c30:	b082      	sub	sp, #8
 8020c32:	af00      	add	r7, sp, #0
 8020c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020c36:	6878      	ldr	r0, [r7, #4]
 8020c38:	f7ff ffb0 	bl	8020b9c <SysTick_Config>
 8020c3c:	4603      	mov	r3, r0
}
 8020c3e:	4618      	mov	r0, r3
 8020c40:	3708      	adds	r7, #8
 8020c42:	46bd      	mov	sp, r7
 8020c44:	bd80      	pop	{r7, pc}
	...

08020c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020c48:	b480      	push	{r7}
 8020c4a:	b089      	sub	sp, #36	; 0x24
 8020c4c:	af00      	add	r7, sp, #0
 8020c4e:	6078      	str	r0, [r7, #4]
 8020c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8020c52:	2300      	movs	r3, #0
 8020c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8020c56:	2300      	movs	r3, #0
 8020c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020c5e:	2300      	movs	r3, #0
 8020c60:	61fb      	str	r3, [r7, #28]
 8020c62:	e16b      	b.n	8020f3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8020c64:	2201      	movs	r2, #1
 8020c66:	69fb      	ldr	r3, [r7, #28]
 8020c68:	fa02 f303 	lsl.w	r3, r2, r3
 8020c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8020c6e:	683b      	ldr	r3, [r7, #0]
 8020c70:	681b      	ldr	r3, [r3, #0]
 8020c72:	697a      	ldr	r2, [r7, #20]
 8020c74:	4013      	ands	r3, r2
 8020c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8020c78:	693a      	ldr	r2, [r7, #16]
 8020c7a:	697b      	ldr	r3, [r7, #20]
 8020c7c:	429a      	cmp	r2, r3
 8020c7e:	f040 815a 	bne.w	8020f36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020c82:	683b      	ldr	r3, [r7, #0]
 8020c84:	685b      	ldr	r3, [r3, #4]
 8020c86:	f003 0303 	and.w	r3, r3, #3
 8020c8a:	2b01      	cmp	r3, #1
 8020c8c:	d005      	beq.n	8020c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020c8e:	683b      	ldr	r3, [r7, #0]
 8020c90:	685b      	ldr	r3, [r3, #4]
 8020c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020c96:	2b02      	cmp	r3, #2
 8020c98:	d130      	bne.n	8020cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8020c9a:	687b      	ldr	r3, [r7, #4]
 8020c9c:	689b      	ldr	r3, [r3, #8]
 8020c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8020ca0:	69fb      	ldr	r3, [r7, #28]
 8020ca2:	005b      	lsls	r3, r3, #1
 8020ca4:	2203      	movs	r2, #3
 8020ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8020caa:	43db      	mvns	r3, r3
 8020cac:	69ba      	ldr	r2, [r7, #24]
 8020cae:	4013      	ands	r3, r2
 8020cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020cb2:	683b      	ldr	r3, [r7, #0]
 8020cb4:	68da      	ldr	r2, [r3, #12]
 8020cb6:	69fb      	ldr	r3, [r7, #28]
 8020cb8:	005b      	lsls	r3, r3, #1
 8020cba:	fa02 f303 	lsl.w	r3, r2, r3
 8020cbe:	69ba      	ldr	r2, [r7, #24]
 8020cc0:	4313      	orrs	r3, r2
 8020cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8020cc4:	687b      	ldr	r3, [r7, #4]
 8020cc6:	69ba      	ldr	r2, [r7, #24]
 8020cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	685b      	ldr	r3, [r3, #4]
 8020cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8020cd0:	2201      	movs	r2, #1
 8020cd2:	69fb      	ldr	r3, [r7, #28]
 8020cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8020cd8:	43db      	mvns	r3, r3
 8020cda:	69ba      	ldr	r2, [r7, #24]
 8020cdc:	4013      	ands	r3, r2
 8020cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020ce0:	683b      	ldr	r3, [r7, #0]
 8020ce2:	685b      	ldr	r3, [r3, #4]
 8020ce4:	091b      	lsrs	r3, r3, #4
 8020ce6:	f003 0201 	and.w	r2, r3, #1
 8020cea:	69fb      	ldr	r3, [r7, #28]
 8020cec:	fa02 f303 	lsl.w	r3, r2, r3
 8020cf0:	69ba      	ldr	r2, [r7, #24]
 8020cf2:	4313      	orrs	r3, r2
 8020cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	69ba      	ldr	r2, [r7, #24]
 8020cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020cfc:	683b      	ldr	r3, [r7, #0]
 8020cfe:	685b      	ldr	r3, [r3, #4]
 8020d00:	f003 0303 	and.w	r3, r3, #3
 8020d04:	2b03      	cmp	r3, #3
 8020d06:	d017      	beq.n	8020d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8020d08:	687b      	ldr	r3, [r7, #4]
 8020d0a:	68db      	ldr	r3, [r3, #12]
 8020d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8020d0e:	69fb      	ldr	r3, [r7, #28]
 8020d10:	005b      	lsls	r3, r3, #1
 8020d12:	2203      	movs	r2, #3
 8020d14:	fa02 f303 	lsl.w	r3, r2, r3
 8020d18:	43db      	mvns	r3, r3
 8020d1a:	69ba      	ldr	r2, [r7, #24]
 8020d1c:	4013      	ands	r3, r2
 8020d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020d20:	683b      	ldr	r3, [r7, #0]
 8020d22:	689a      	ldr	r2, [r3, #8]
 8020d24:	69fb      	ldr	r3, [r7, #28]
 8020d26:	005b      	lsls	r3, r3, #1
 8020d28:	fa02 f303 	lsl.w	r3, r2, r3
 8020d2c:	69ba      	ldr	r2, [r7, #24]
 8020d2e:	4313      	orrs	r3, r2
 8020d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8020d32:	687b      	ldr	r3, [r7, #4]
 8020d34:	69ba      	ldr	r2, [r7, #24]
 8020d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020d38:	683b      	ldr	r3, [r7, #0]
 8020d3a:	685b      	ldr	r3, [r3, #4]
 8020d3c:	f003 0303 	and.w	r3, r3, #3
 8020d40:	2b02      	cmp	r3, #2
 8020d42:	d123      	bne.n	8020d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020d44:	69fb      	ldr	r3, [r7, #28]
 8020d46:	08da      	lsrs	r2, r3, #3
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	3208      	adds	r2, #8
 8020d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8020d52:	69fb      	ldr	r3, [r7, #28]
 8020d54:	f003 0307 	and.w	r3, r3, #7
 8020d58:	009b      	lsls	r3, r3, #2
 8020d5a:	220f      	movs	r2, #15
 8020d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8020d60:	43db      	mvns	r3, r3
 8020d62:	69ba      	ldr	r2, [r7, #24]
 8020d64:	4013      	ands	r3, r2
 8020d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8020d68:	683b      	ldr	r3, [r7, #0]
 8020d6a:	691a      	ldr	r2, [r3, #16]
 8020d6c:	69fb      	ldr	r3, [r7, #28]
 8020d6e:	f003 0307 	and.w	r3, r3, #7
 8020d72:	009b      	lsls	r3, r3, #2
 8020d74:	fa02 f303 	lsl.w	r3, r2, r3
 8020d78:	69ba      	ldr	r2, [r7, #24]
 8020d7a:	4313      	orrs	r3, r2
 8020d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8020d7e:	69fb      	ldr	r3, [r7, #28]
 8020d80:	08da      	lsrs	r2, r3, #3
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	3208      	adds	r2, #8
 8020d86:	69b9      	ldr	r1, [r7, #24]
 8020d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8020d92:	69fb      	ldr	r3, [r7, #28]
 8020d94:	005b      	lsls	r3, r3, #1
 8020d96:	2203      	movs	r2, #3
 8020d98:	fa02 f303 	lsl.w	r3, r2, r3
 8020d9c:	43db      	mvns	r3, r3
 8020d9e:	69ba      	ldr	r2, [r7, #24]
 8020da0:	4013      	ands	r3, r2
 8020da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020da4:	683b      	ldr	r3, [r7, #0]
 8020da6:	685b      	ldr	r3, [r3, #4]
 8020da8:	f003 0203 	and.w	r2, r3, #3
 8020dac:	69fb      	ldr	r3, [r7, #28]
 8020dae:	005b      	lsls	r3, r3, #1
 8020db0:	fa02 f303 	lsl.w	r3, r2, r3
 8020db4:	69ba      	ldr	r2, [r7, #24]
 8020db6:	4313      	orrs	r3, r2
 8020db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8020dba:	687b      	ldr	r3, [r7, #4]
 8020dbc:	69ba      	ldr	r2, [r7, #24]
 8020dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8020dc0:	683b      	ldr	r3, [r7, #0]
 8020dc2:	685b      	ldr	r3, [r3, #4]
 8020dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8020dc8:	2b00      	cmp	r3, #0
 8020dca:	f000 80b4 	beq.w	8020f36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020dce:	2300      	movs	r3, #0
 8020dd0:	60fb      	str	r3, [r7, #12]
 8020dd2:	4b60      	ldr	r3, [pc, #384]	; (8020f54 <HAL_GPIO_Init+0x30c>)
 8020dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020dd6:	4a5f      	ldr	r2, [pc, #380]	; (8020f54 <HAL_GPIO_Init+0x30c>)
 8020dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8020dde:	4b5d      	ldr	r3, [pc, #372]	; (8020f54 <HAL_GPIO_Init+0x30c>)
 8020de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020de6:	60fb      	str	r3, [r7, #12]
 8020de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8020dea:	4a5b      	ldr	r2, [pc, #364]	; (8020f58 <HAL_GPIO_Init+0x310>)
 8020dec:	69fb      	ldr	r3, [r7, #28]
 8020dee:	089b      	lsrs	r3, r3, #2
 8020df0:	3302      	adds	r3, #2
 8020df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8020df8:	69fb      	ldr	r3, [r7, #28]
 8020dfa:	f003 0303 	and.w	r3, r3, #3
 8020dfe:	009b      	lsls	r3, r3, #2
 8020e00:	220f      	movs	r2, #15
 8020e02:	fa02 f303 	lsl.w	r3, r2, r3
 8020e06:	43db      	mvns	r3, r3
 8020e08:	69ba      	ldr	r2, [r7, #24]
 8020e0a:	4013      	ands	r3, r2
 8020e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	4a52      	ldr	r2, [pc, #328]	; (8020f5c <HAL_GPIO_Init+0x314>)
 8020e12:	4293      	cmp	r3, r2
 8020e14:	d02b      	beq.n	8020e6e <HAL_GPIO_Init+0x226>
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	4a51      	ldr	r2, [pc, #324]	; (8020f60 <HAL_GPIO_Init+0x318>)
 8020e1a:	4293      	cmp	r3, r2
 8020e1c:	d025      	beq.n	8020e6a <HAL_GPIO_Init+0x222>
 8020e1e:	687b      	ldr	r3, [r7, #4]
 8020e20:	4a50      	ldr	r2, [pc, #320]	; (8020f64 <HAL_GPIO_Init+0x31c>)
 8020e22:	4293      	cmp	r3, r2
 8020e24:	d01f      	beq.n	8020e66 <HAL_GPIO_Init+0x21e>
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	4a4f      	ldr	r2, [pc, #316]	; (8020f68 <HAL_GPIO_Init+0x320>)
 8020e2a:	4293      	cmp	r3, r2
 8020e2c:	d019      	beq.n	8020e62 <HAL_GPIO_Init+0x21a>
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	4a4e      	ldr	r2, [pc, #312]	; (8020f6c <HAL_GPIO_Init+0x324>)
 8020e32:	4293      	cmp	r3, r2
 8020e34:	d013      	beq.n	8020e5e <HAL_GPIO_Init+0x216>
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	4a4d      	ldr	r2, [pc, #308]	; (8020f70 <HAL_GPIO_Init+0x328>)
 8020e3a:	4293      	cmp	r3, r2
 8020e3c:	d00d      	beq.n	8020e5a <HAL_GPIO_Init+0x212>
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	4a4c      	ldr	r2, [pc, #304]	; (8020f74 <HAL_GPIO_Init+0x32c>)
 8020e42:	4293      	cmp	r3, r2
 8020e44:	d007      	beq.n	8020e56 <HAL_GPIO_Init+0x20e>
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	4a4b      	ldr	r2, [pc, #300]	; (8020f78 <HAL_GPIO_Init+0x330>)
 8020e4a:	4293      	cmp	r3, r2
 8020e4c:	d101      	bne.n	8020e52 <HAL_GPIO_Init+0x20a>
 8020e4e:	2307      	movs	r3, #7
 8020e50:	e00e      	b.n	8020e70 <HAL_GPIO_Init+0x228>
 8020e52:	2308      	movs	r3, #8
 8020e54:	e00c      	b.n	8020e70 <HAL_GPIO_Init+0x228>
 8020e56:	2306      	movs	r3, #6
 8020e58:	e00a      	b.n	8020e70 <HAL_GPIO_Init+0x228>
 8020e5a:	2305      	movs	r3, #5
 8020e5c:	e008      	b.n	8020e70 <HAL_GPIO_Init+0x228>
 8020e5e:	2304      	movs	r3, #4
 8020e60:	e006      	b.n	8020e70 <HAL_GPIO_Init+0x228>
 8020e62:	2303      	movs	r3, #3
 8020e64:	e004      	b.n	8020e70 <HAL_GPIO_Init+0x228>
 8020e66:	2302      	movs	r3, #2
 8020e68:	e002      	b.n	8020e70 <HAL_GPIO_Init+0x228>
 8020e6a:	2301      	movs	r3, #1
 8020e6c:	e000      	b.n	8020e70 <HAL_GPIO_Init+0x228>
 8020e6e:	2300      	movs	r3, #0
 8020e70:	69fa      	ldr	r2, [r7, #28]
 8020e72:	f002 0203 	and.w	r2, r2, #3
 8020e76:	0092      	lsls	r2, r2, #2
 8020e78:	4093      	lsls	r3, r2
 8020e7a:	69ba      	ldr	r2, [r7, #24]
 8020e7c:	4313      	orrs	r3, r2
 8020e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8020e80:	4935      	ldr	r1, [pc, #212]	; (8020f58 <HAL_GPIO_Init+0x310>)
 8020e82:	69fb      	ldr	r3, [r7, #28]
 8020e84:	089b      	lsrs	r3, r3, #2
 8020e86:	3302      	adds	r3, #2
 8020e88:	69ba      	ldr	r2, [r7, #24]
 8020e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8020e8e:	4b3b      	ldr	r3, [pc, #236]	; (8020f7c <HAL_GPIO_Init+0x334>)
 8020e90:	689b      	ldr	r3, [r3, #8]
 8020e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020e94:	693b      	ldr	r3, [r7, #16]
 8020e96:	43db      	mvns	r3, r3
 8020e98:	69ba      	ldr	r2, [r7, #24]
 8020e9a:	4013      	ands	r3, r2
 8020e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8020e9e:	683b      	ldr	r3, [r7, #0]
 8020ea0:	685b      	ldr	r3, [r3, #4]
 8020ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	d003      	beq.n	8020eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8020eaa:	69ba      	ldr	r2, [r7, #24]
 8020eac:	693b      	ldr	r3, [r7, #16]
 8020eae:	4313      	orrs	r3, r2
 8020eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8020eb2:	4a32      	ldr	r2, [pc, #200]	; (8020f7c <HAL_GPIO_Init+0x334>)
 8020eb4:	69bb      	ldr	r3, [r7, #24]
 8020eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8020eb8:	4b30      	ldr	r3, [pc, #192]	; (8020f7c <HAL_GPIO_Init+0x334>)
 8020eba:	68db      	ldr	r3, [r3, #12]
 8020ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020ebe:	693b      	ldr	r3, [r7, #16]
 8020ec0:	43db      	mvns	r3, r3
 8020ec2:	69ba      	ldr	r2, [r7, #24]
 8020ec4:	4013      	ands	r3, r2
 8020ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8020ec8:	683b      	ldr	r3, [r7, #0]
 8020eca:	685b      	ldr	r3, [r3, #4]
 8020ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	d003      	beq.n	8020edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8020ed4:	69ba      	ldr	r2, [r7, #24]
 8020ed6:	693b      	ldr	r3, [r7, #16]
 8020ed8:	4313      	orrs	r3, r2
 8020eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8020edc:	4a27      	ldr	r2, [pc, #156]	; (8020f7c <HAL_GPIO_Init+0x334>)
 8020ede:	69bb      	ldr	r3, [r7, #24]
 8020ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8020ee2:	4b26      	ldr	r3, [pc, #152]	; (8020f7c <HAL_GPIO_Init+0x334>)
 8020ee4:	685b      	ldr	r3, [r3, #4]
 8020ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020ee8:	693b      	ldr	r3, [r7, #16]
 8020eea:	43db      	mvns	r3, r3
 8020eec:	69ba      	ldr	r2, [r7, #24]
 8020eee:	4013      	ands	r3, r2
 8020ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8020ef2:	683b      	ldr	r3, [r7, #0]
 8020ef4:	685b      	ldr	r3, [r3, #4]
 8020ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	d003      	beq.n	8020f06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8020efe:	69ba      	ldr	r2, [r7, #24]
 8020f00:	693b      	ldr	r3, [r7, #16]
 8020f02:	4313      	orrs	r3, r2
 8020f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8020f06:	4a1d      	ldr	r2, [pc, #116]	; (8020f7c <HAL_GPIO_Init+0x334>)
 8020f08:	69bb      	ldr	r3, [r7, #24]
 8020f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8020f0c:	4b1b      	ldr	r3, [pc, #108]	; (8020f7c <HAL_GPIO_Init+0x334>)
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8020f12:	693b      	ldr	r3, [r7, #16]
 8020f14:	43db      	mvns	r3, r3
 8020f16:	69ba      	ldr	r2, [r7, #24]
 8020f18:	4013      	ands	r3, r2
 8020f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8020f1c:	683b      	ldr	r3, [r7, #0]
 8020f1e:	685b      	ldr	r3, [r3, #4]
 8020f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d003      	beq.n	8020f30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8020f28:	69ba      	ldr	r2, [r7, #24]
 8020f2a:	693b      	ldr	r3, [r7, #16]
 8020f2c:	4313      	orrs	r3, r2
 8020f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8020f30:	4a12      	ldr	r2, [pc, #72]	; (8020f7c <HAL_GPIO_Init+0x334>)
 8020f32:	69bb      	ldr	r3, [r7, #24]
 8020f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020f36:	69fb      	ldr	r3, [r7, #28]
 8020f38:	3301      	adds	r3, #1
 8020f3a:	61fb      	str	r3, [r7, #28]
 8020f3c:	69fb      	ldr	r3, [r7, #28]
 8020f3e:	2b0f      	cmp	r3, #15
 8020f40:	f67f ae90 	bls.w	8020c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8020f44:	bf00      	nop
 8020f46:	bf00      	nop
 8020f48:	3724      	adds	r7, #36	; 0x24
 8020f4a:	46bd      	mov	sp, r7
 8020f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f50:	4770      	bx	lr
 8020f52:	bf00      	nop
 8020f54:	40023800 	.word	0x40023800
 8020f58:	40013800 	.word	0x40013800
 8020f5c:	40020000 	.word	0x40020000
 8020f60:	40020400 	.word	0x40020400
 8020f64:	40020800 	.word	0x40020800
 8020f68:	40020c00 	.word	0x40020c00
 8020f6c:	40021000 	.word	0x40021000
 8020f70:	40021400 	.word	0x40021400
 8020f74:	40021800 	.word	0x40021800
 8020f78:	40021c00 	.word	0x40021c00
 8020f7c:	40013c00 	.word	0x40013c00

08020f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8020f80:	b480      	push	{r7}
 8020f82:	b083      	sub	sp, #12
 8020f84:	af00      	add	r7, sp, #0
 8020f86:	6078      	str	r0, [r7, #4]
 8020f88:	460b      	mov	r3, r1
 8020f8a:	807b      	strh	r3, [r7, #2]
 8020f8c:	4613      	mov	r3, r2
 8020f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020f90:	787b      	ldrb	r3, [r7, #1]
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d003      	beq.n	8020f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8020f96:	887a      	ldrh	r2, [r7, #2]
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8020f9c:	e003      	b.n	8020fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8020f9e:	887b      	ldrh	r3, [r7, #2]
 8020fa0:	041a      	lsls	r2, r3, #16
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	619a      	str	r2, [r3, #24]
}
 8020fa6:	bf00      	nop
 8020fa8:	370c      	adds	r7, #12
 8020faa:	46bd      	mov	sp, r7
 8020fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fb0:	4770      	bx	lr

08020fb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8020fb2:	b480      	push	{r7}
 8020fb4:	b085      	sub	sp, #20
 8020fb6:	af00      	add	r7, sp, #0
 8020fb8:	6078      	str	r0, [r7, #4]
 8020fba:	460b      	mov	r3, r1
 8020fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	695b      	ldr	r3, [r3, #20]
 8020fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8020fc4:	887a      	ldrh	r2, [r7, #2]
 8020fc6:	68fb      	ldr	r3, [r7, #12]
 8020fc8:	4013      	ands	r3, r2
 8020fca:	041a      	lsls	r2, r3, #16
 8020fcc:	68fb      	ldr	r3, [r7, #12]
 8020fce:	43d9      	mvns	r1, r3
 8020fd0:	887b      	ldrh	r3, [r7, #2]
 8020fd2:	400b      	ands	r3, r1
 8020fd4:	431a      	orrs	r2, r3
 8020fd6:	687b      	ldr	r3, [r7, #4]
 8020fd8:	619a      	str	r2, [r3, #24]
}
 8020fda:	bf00      	nop
 8020fdc:	3714      	adds	r7, #20
 8020fde:	46bd      	mov	sp, r7
 8020fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fe4:	4770      	bx	lr
	...

08020fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020fe8:	b580      	push	{r7, lr}
 8020fea:	b086      	sub	sp, #24
 8020fec:	af00      	add	r7, sp, #0
 8020fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d101      	bne.n	8020ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8020ff6:	2301      	movs	r3, #1
 8020ff8:	e267      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	681b      	ldr	r3, [r3, #0]
 8020ffe:	f003 0301 	and.w	r3, r3, #1
 8021002:	2b00      	cmp	r3, #0
 8021004:	d075      	beq.n	80210f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8021006:	4b88      	ldr	r3, [pc, #544]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021008:	689b      	ldr	r3, [r3, #8]
 802100a:	f003 030c 	and.w	r3, r3, #12
 802100e:	2b04      	cmp	r3, #4
 8021010:	d00c      	beq.n	802102c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021012:	4b85      	ldr	r3, [pc, #532]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021014:	689b      	ldr	r3, [r3, #8]
 8021016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802101a:	2b08      	cmp	r3, #8
 802101c:	d112      	bne.n	8021044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802101e:	4b82      	ldr	r3, [pc, #520]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021020:	685b      	ldr	r3, [r3, #4]
 8021022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802102a:	d10b      	bne.n	8021044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802102c:	4b7e      	ldr	r3, [pc, #504]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 802102e:	681b      	ldr	r3, [r3, #0]
 8021030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021034:	2b00      	cmp	r3, #0
 8021036:	d05b      	beq.n	80210f0 <HAL_RCC_OscConfig+0x108>
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	685b      	ldr	r3, [r3, #4]
 802103c:	2b00      	cmp	r3, #0
 802103e:	d157      	bne.n	80210f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8021040:	2301      	movs	r3, #1
 8021042:	e242      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	685b      	ldr	r3, [r3, #4]
 8021048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802104c:	d106      	bne.n	802105c <HAL_RCC_OscConfig+0x74>
 802104e:	4b76      	ldr	r3, [pc, #472]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	4a75      	ldr	r2, [pc, #468]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021058:	6013      	str	r3, [r2, #0]
 802105a:	e01d      	b.n	8021098 <HAL_RCC_OscConfig+0xb0>
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	685b      	ldr	r3, [r3, #4]
 8021060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021064:	d10c      	bne.n	8021080 <HAL_RCC_OscConfig+0x98>
 8021066:	4b70      	ldr	r3, [pc, #448]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	4a6f      	ldr	r2, [pc, #444]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 802106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021070:	6013      	str	r3, [r2, #0]
 8021072:	4b6d      	ldr	r3, [pc, #436]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021074:	681b      	ldr	r3, [r3, #0]
 8021076:	4a6c      	ldr	r2, [pc, #432]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802107c:	6013      	str	r3, [r2, #0]
 802107e:	e00b      	b.n	8021098 <HAL_RCC_OscConfig+0xb0>
 8021080:	4b69      	ldr	r3, [pc, #420]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021082:	681b      	ldr	r3, [r3, #0]
 8021084:	4a68      	ldr	r2, [pc, #416]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802108a:	6013      	str	r3, [r2, #0]
 802108c:	4b66      	ldr	r3, [pc, #408]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 802108e:	681b      	ldr	r3, [r3, #0]
 8021090:	4a65      	ldr	r2, [pc, #404]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	685b      	ldr	r3, [r3, #4]
 802109c:	2b00      	cmp	r3, #0
 802109e:	d013      	beq.n	80210c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80210a0:	f7ff fce0 	bl	8020a64 <HAL_GetTick>
 80210a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210a6:	e008      	b.n	80210ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80210a8:	f7ff fcdc 	bl	8020a64 <HAL_GetTick>
 80210ac:	4602      	mov	r2, r0
 80210ae:	693b      	ldr	r3, [r7, #16]
 80210b0:	1ad3      	subs	r3, r2, r3
 80210b2:	2b64      	cmp	r3, #100	; 0x64
 80210b4:	d901      	bls.n	80210ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80210b6:	2303      	movs	r3, #3
 80210b8:	e207      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210ba:	4b5b      	ldr	r3, [pc, #364]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	d0f0      	beq.n	80210a8 <HAL_RCC_OscConfig+0xc0>
 80210c6:	e014      	b.n	80210f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80210c8:	f7ff fccc 	bl	8020a64 <HAL_GetTick>
 80210cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80210ce:	e008      	b.n	80210e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80210d0:	f7ff fcc8 	bl	8020a64 <HAL_GetTick>
 80210d4:	4602      	mov	r2, r0
 80210d6:	693b      	ldr	r3, [r7, #16]
 80210d8:	1ad3      	subs	r3, r2, r3
 80210da:	2b64      	cmp	r3, #100	; 0x64
 80210dc:	d901      	bls.n	80210e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80210de:	2303      	movs	r3, #3
 80210e0:	e1f3      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80210e2:	4b51      	ldr	r3, [pc, #324]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 80210e4:	681b      	ldr	r3, [r3, #0]
 80210e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80210ea:	2b00      	cmp	r3, #0
 80210ec:	d1f0      	bne.n	80210d0 <HAL_RCC_OscConfig+0xe8>
 80210ee:	e000      	b.n	80210f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80210f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	f003 0302 	and.w	r3, r3, #2
 80210fa:	2b00      	cmp	r3, #0
 80210fc:	d063      	beq.n	80211c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80210fe:	4b4a      	ldr	r3, [pc, #296]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021100:	689b      	ldr	r3, [r3, #8]
 8021102:	f003 030c 	and.w	r3, r3, #12
 8021106:	2b00      	cmp	r3, #0
 8021108:	d00b      	beq.n	8021122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802110a:	4b47      	ldr	r3, [pc, #284]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 802110c:	689b      	ldr	r3, [r3, #8]
 802110e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8021112:	2b08      	cmp	r3, #8
 8021114:	d11c      	bne.n	8021150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021116:	4b44      	ldr	r3, [pc, #272]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021118:	685b      	ldr	r3, [r3, #4]
 802111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802111e:	2b00      	cmp	r3, #0
 8021120:	d116      	bne.n	8021150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021122:	4b41      	ldr	r3, [pc, #260]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021124:	681b      	ldr	r3, [r3, #0]
 8021126:	f003 0302 	and.w	r3, r3, #2
 802112a:	2b00      	cmp	r3, #0
 802112c:	d005      	beq.n	802113a <HAL_RCC_OscConfig+0x152>
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	68db      	ldr	r3, [r3, #12]
 8021132:	2b01      	cmp	r3, #1
 8021134:	d001      	beq.n	802113a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8021136:	2301      	movs	r3, #1
 8021138:	e1c7      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802113a:	4b3b      	ldr	r3, [pc, #236]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021142:	687b      	ldr	r3, [r7, #4]
 8021144:	691b      	ldr	r3, [r3, #16]
 8021146:	00db      	lsls	r3, r3, #3
 8021148:	4937      	ldr	r1, [pc, #220]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 802114a:	4313      	orrs	r3, r2
 802114c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802114e:	e03a      	b.n	80211c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	68db      	ldr	r3, [r3, #12]
 8021154:	2b00      	cmp	r3, #0
 8021156:	d020      	beq.n	802119a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021158:	4b34      	ldr	r3, [pc, #208]	; (802122c <HAL_RCC_OscConfig+0x244>)
 802115a:	2201      	movs	r2, #1
 802115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802115e:	f7ff fc81 	bl	8020a64 <HAL_GetTick>
 8021162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021164:	e008      	b.n	8021178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021166:	f7ff fc7d 	bl	8020a64 <HAL_GetTick>
 802116a:	4602      	mov	r2, r0
 802116c:	693b      	ldr	r3, [r7, #16]
 802116e:	1ad3      	subs	r3, r2, r3
 8021170:	2b02      	cmp	r3, #2
 8021172:	d901      	bls.n	8021178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8021174:	2303      	movs	r3, #3
 8021176:	e1a8      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021178:	4b2b      	ldr	r3, [pc, #172]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	f003 0302 	and.w	r3, r3, #2
 8021180:	2b00      	cmp	r3, #0
 8021182:	d0f0      	beq.n	8021166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021184:	4b28      	ldr	r3, [pc, #160]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021186:	681b      	ldr	r3, [r3, #0]
 8021188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	691b      	ldr	r3, [r3, #16]
 8021190:	00db      	lsls	r3, r3, #3
 8021192:	4925      	ldr	r1, [pc, #148]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 8021194:	4313      	orrs	r3, r2
 8021196:	600b      	str	r3, [r1, #0]
 8021198:	e015      	b.n	80211c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802119a:	4b24      	ldr	r3, [pc, #144]	; (802122c <HAL_RCC_OscConfig+0x244>)
 802119c:	2200      	movs	r2, #0
 802119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80211a0:	f7ff fc60 	bl	8020a64 <HAL_GetTick>
 80211a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80211a6:	e008      	b.n	80211ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80211a8:	f7ff fc5c 	bl	8020a64 <HAL_GetTick>
 80211ac:	4602      	mov	r2, r0
 80211ae:	693b      	ldr	r3, [r7, #16]
 80211b0:	1ad3      	subs	r3, r2, r3
 80211b2:	2b02      	cmp	r3, #2
 80211b4:	d901      	bls.n	80211ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80211b6:	2303      	movs	r3, #3
 80211b8:	e187      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80211ba:	4b1b      	ldr	r3, [pc, #108]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 80211bc:	681b      	ldr	r3, [r3, #0]
 80211be:	f003 0302 	and.w	r3, r3, #2
 80211c2:	2b00      	cmp	r3, #0
 80211c4:	d1f0      	bne.n	80211a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	681b      	ldr	r3, [r3, #0]
 80211ca:	f003 0308 	and.w	r3, r3, #8
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	d036      	beq.n	8021240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80211d2:	687b      	ldr	r3, [r7, #4]
 80211d4:	695b      	ldr	r3, [r3, #20]
 80211d6:	2b00      	cmp	r3, #0
 80211d8:	d016      	beq.n	8021208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80211da:	4b15      	ldr	r3, [pc, #84]	; (8021230 <HAL_RCC_OscConfig+0x248>)
 80211dc:	2201      	movs	r2, #1
 80211de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80211e0:	f7ff fc40 	bl	8020a64 <HAL_GetTick>
 80211e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80211e6:	e008      	b.n	80211fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80211e8:	f7ff fc3c 	bl	8020a64 <HAL_GetTick>
 80211ec:	4602      	mov	r2, r0
 80211ee:	693b      	ldr	r3, [r7, #16]
 80211f0:	1ad3      	subs	r3, r2, r3
 80211f2:	2b02      	cmp	r3, #2
 80211f4:	d901      	bls.n	80211fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80211f6:	2303      	movs	r3, #3
 80211f8:	e167      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80211fa:	4b0b      	ldr	r3, [pc, #44]	; (8021228 <HAL_RCC_OscConfig+0x240>)
 80211fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80211fe:	f003 0302 	and.w	r3, r3, #2
 8021202:	2b00      	cmp	r3, #0
 8021204:	d0f0      	beq.n	80211e8 <HAL_RCC_OscConfig+0x200>
 8021206:	e01b      	b.n	8021240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021208:	4b09      	ldr	r3, [pc, #36]	; (8021230 <HAL_RCC_OscConfig+0x248>)
 802120a:	2200      	movs	r2, #0
 802120c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802120e:	f7ff fc29 	bl	8020a64 <HAL_GetTick>
 8021212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021214:	e00e      	b.n	8021234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021216:	f7ff fc25 	bl	8020a64 <HAL_GetTick>
 802121a:	4602      	mov	r2, r0
 802121c:	693b      	ldr	r3, [r7, #16]
 802121e:	1ad3      	subs	r3, r2, r3
 8021220:	2b02      	cmp	r3, #2
 8021222:	d907      	bls.n	8021234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8021224:	2303      	movs	r3, #3
 8021226:	e150      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
 8021228:	40023800 	.word	0x40023800
 802122c:	42470000 	.word	0x42470000
 8021230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021234:	4b88      	ldr	r3, [pc, #544]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021238:	f003 0302 	and.w	r3, r3, #2
 802123c:	2b00      	cmp	r3, #0
 802123e:	d1ea      	bne.n	8021216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	681b      	ldr	r3, [r3, #0]
 8021244:	f003 0304 	and.w	r3, r3, #4
 8021248:	2b00      	cmp	r3, #0
 802124a:	f000 8097 	beq.w	802137c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802124e:	2300      	movs	r3, #0
 8021250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021252:	4b81      	ldr	r3, [pc, #516]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802125a:	2b00      	cmp	r3, #0
 802125c:	d10f      	bne.n	802127e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802125e:	2300      	movs	r3, #0
 8021260:	60bb      	str	r3, [r7, #8]
 8021262:	4b7d      	ldr	r3, [pc, #500]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021266:	4a7c      	ldr	r2, [pc, #496]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802126c:	6413      	str	r3, [r2, #64]	; 0x40
 802126e:	4b7a      	ldr	r3, [pc, #488]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021276:	60bb      	str	r3, [r7, #8]
 8021278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802127a:	2301      	movs	r3, #1
 802127c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802127e:	4b77      	ldr	r3, [pc, #476]	; (802145c <HAL_RCC_OscConfig+0x474>)
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021286:	2b00      	cmp	r3, #0
 8021288:	d118      	bne.n	80212bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802128a:	4b74      	ldr	r3, [pc, #464]	; (802145c <HAL_RCC_OscConfig+0x474>)
 802128c:	681b      	ldr	r3, [r3, #0]
 802128e:	4a73      	ldr	r2, [pc, #460]	; (802145c <HAL_RCC_OscConfig+0x474>)
 8021290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021296:	f7ff fbe5 	bl	8020a64 <HAL_GetTick>
 802129a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802129c:	e008      	b.n	80212b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802129e:	f7ff fbe1 	bl	8020a64 <HAL_GetTick>
 80212a2:	4602      	mov	r2, r0
 80212a4:	693b      	ldr	r3, [r7, #16]
 80212a6:	1ad3      	subs	r3, r2, r3
 80212a8:	2b02      	cmp	r3, #2
 80212aa:	d901      	bls.n	80212b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80212ac:	2303      	movs	r3, #3
 80212ae:	e10c      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80212b0:	4b6a      	ldr	r3, [pc, #424]	; (802145c <HAL_RCC_OscConfig+0x474>)
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80212b8:	2b00      	cmp	r3, #0
 80212ba:	d0f0      	beq.n	802129e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80212bc:	687b      	ldr	r3, [r7, #4]
 80212be:	689b      	ldr	r3, [r3, #8]
 80212c0:	2b01      	cmp	r3, #1
 80212c2:	d106      	bne.n	80212d2 <HAL_RCC_OscConfig+0x2ea>
 80212c4:	4b64      	ldr	r3, [pc, #400]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80212c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80212c8:	4a63      	ldr	r2, [pc, #396]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80212ca:	f043 0301 	orr.w	r3, r3, #1
 80212ce:	6713      	str	r3, [r2, #112]	; 0x70
 80212d0:	e01c      	b.n	802130c <HAL_RCC_OscConfig+0x324>
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	689b      	ldr	r3, [r3, #8]
 80212d6:	2b05      	cmp	r3, #5
 80212d8:	d10c      	bne.n	80212f4 <HAL_RCC_OscConfig+0x30c>
 80212da:	4b5f      	ldr	r3, [pc, #380]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80212dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80212de:	4a5e      	ldr	r2, [pc, #376]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80212e0:	f043 0304 	orr.w	r3, r3, #4
 80212e4:	6713      	str	r3, [r2, #112]	; 0x70
 80212e6:	4b5c      	ldr	r3, [pc, #368]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80212e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80212ea:	4a5b      	ldr	r2, [pc, #364]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80212ec:	f043 0301 	orr.w	r3, r3, #1
 80212f0:	6713      	str	r3, [r2, #112]	; 0x70
 80212f2:	e00b      	b.n	802130c <HAL_RCC_OscConfig+0x324>
 80212f4:	4b58      	ldr	r3, [pc, #352]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80212f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80212f8:	4a57      	ldr	r2, [pc, #348]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80212fa:	f023 0301 	bic.w	r3, r3, #1
 80212fe:	6713      	str	r3, [r2, #112]	; 0x70
 8021300:	4b55      	ldr	r3, [pc, #340]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021304:	4a54      	ldr	r2, [pc, #336]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021306:	f023 0304 	bic.w	r3, r3, #4
 802130a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802130c:	687b      	ldr	r3, [r7, #4]
 802130e:	689b      	ldr	r3, [r3, #8]
 8021310:	2b00      	cmp	r3, #0
 8021312:	d015      	beq.n	8021340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021314:	f7ff fba6 	bl	8020a64 <HAL_GetTick>
 8021318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802131a:	e00a      	b.n	8021332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802131c:	f7ff fba2 	bl	8020a64 <HAL_GetTick>
 8021320:	4602      	mov	r2, r0
 8021322:	693b      	ldr	r3, [r7, #16]
 8021324:	1ad3      	subs	r3, r2, r3
 8021326:	f241 3288 	movw	r2, #5000	; 0x1388
 802132a:	4293      	cmp	r3, r2
 802132c:	d901      	bls.n	8021332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 802132e:	2303      	movs	r3, #3
 8021330:	e0cb      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021332:	4b49      	ldr	r3, [pc, #292]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021336:	f003 0302 	and.w	r3, r3, #2
 802133a:	2b00      	cmp	r3, #0
 802133c:	d0ee      	beq.n	802131c <HAL_RCC_OscConfig+0x334>
 802133e:	e014      	b.n	802136a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021340:	f7ff fb90 	bl	8020a64 <HAL_GetTick>
 8021344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021346:	e00a      	b.n	802135e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021348:	f7ff fb8c 	bl	8020a64 <HAL_GetTick>
 802134c:	4602      	mov	r2, r0
 802134e:	693b      	ldr	r3, [r7, #16]
 8021350:	1ad3      	subs	r3, r2, r3
 8021352:	f241 3288 	movw	r2, #5000	; 0x1388
 8021356:	4293      	cmp	r3, r2
 8021358:	d901      	bls.n	802135e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 802135a:	2303      	movs	r3, #3
 802135c:	e0b5      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802135e:	4b3e      	ldr	r3, [pc, #248]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021362:	f003 0302 	and.w	r3, r3, #2
 8021366:	2b00      	cmp	r3, #0
 8021368:	d1ee      	bne.n	8021348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802136a:	7dfb      	ldrb	r3, [r7, #23]
 802136c:	2b01      	cmp	r3, #1
 802136e:	d105      	bne.n	802137c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021370:	4b39      	ldr	r3, [pc, #228]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021374:	4a38      	ldr	r2, [pc, #224]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802137a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	699b      	ldr	r3, [r3, #24]
 8021380:	2b00      	cmp	r3, #0
 8021382:	f000 80a1 	beq.w	80214c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8021386:	4b34      	ldr	r3, [pc, #208]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021388:	689b      	ldr	r3, [r3, #8]
 802138a:	f003 030c 	and.w	r3, r3, #12
 802138e:	2b08      	cmp	r3, #8
 8021390:	d05c      	beq.n	802144c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	699b      	ldr	r3, [r3, #24]
 8021396:	2b02      	cmp	r3, #2
 8021398:	d141      	bne.n	802141e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802139a:	4b31      	ldr	r3, [pc, #196]	; (8021460 <HAL_RCC_OscConfig+0x478>)
 802139c:	2200      	movs	r2, #0
 802139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80213a0:	f7ff fb60 	bl	8020a64 <HAL_GetTick>
 80213a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80213a6:	e008      	b.n	80213ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80213a8:	f7ff fb5c 	bl	8020a64 <HAL_GetTick>
 80213ac:	4602      	mov	r2, r0
 80213ae:	693b      	ldr	r3, [r7, #16]
 80213b0:	1ad3      	subs	r3, r2, r3
 80213b2:	2b02      	cmp	r3, #2
 80213b4:	d901      	bls.n	80213ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80213b6:	2303      	movs	r3, #3
 80213b8:	e087      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80213ba:	4b27      	ldr	r3, [pc, #156]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80213bc:	681b      	ldr	r3, [r3, #0]
 80213be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	d1f0      	bne.n	80213a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80213c6:	687b      	ldr	r3, [r7, #4]
 80213c8:	69da      	ldr	r2, [r3, #28]
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	6a1b      	ldr	r3, [r3, #32]
 80213ce:	431a      	orrs	r2, r3
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80213d4:	019b      	lsls	r3, r3, #6
 80213d6:	431a      	orrs	r2, r3
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80213dc:	085b      	lsrs	r3, r3, #1
 80213de:	3b01      	subs	r3, #1
 80213e0:	041b      	lsls	r3, r3, #16
 80213e2:	431a      	orrs	r2, r3
 80213e4:	687b      	ldr	r3, [r7, #4]
 80213e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80213e8:	061b      	lsls	r3, r3, #24
 80213ea:	491b      	ldr	r1, [pc, #108]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 80213ec:	4313      	orrs	r3, r2
 80213ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80213f0:	4b1b      	ldr	r3, [pc, #108]	; (8021460 <HAL_RCC_OscConfig+0x478>)
 80213f2:	2201      	movs	r2, #1
 80213f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80213f6:	f7ff fb35 	bl	8020a64 <HAL_GetTick>
 80213fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80213fc:	e008      	b.n	8021410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80213fe:	f7ff fb31 	bl	8020a64 <HAL_GetTick>
 8021402:	4602      	mov	r2, r0
 8021404:	693b      	ldr	r3, [r7, #16]
 8021406:	1ad3      	subs	r3, r2, r3
 8021408:	2b02      	cmp	r3, #2
 802140a:	d901      	bls.n	8021410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 802140c:	2303      	movs	r3, #3
 802140e:	e05c      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021410:	4b11      	ldr	r3, [pc, #68]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021418:	2b00      	cmp	r3, #0
 802141a:	d0f0      	beq.n	80213fe <HAL_RCC_OscConfig+0x416>
 802141c:	e054      	b.n	80214c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802141e:	4b10      	ldr	r3, [pc, #64]	; (8021460 <HAL_RCC_OscConfig+0x478>)
 8021420:	2200      	movs	r2, #0
 8021422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021424:	f7ff fb1e 	bl	8020a64 <HAL_GetTick>
 8021428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802142a:	e008      	b.n	802143e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802142c:	f7ff fb1a 	bl	8020a64 <HAL_GetTick>
 8021430:	4602      	mov	r2, r0
 8021432:	693b      	ldr	r3, [r7, #16]
 8021434:	1ad3      	subs	r3, r2, r3
 8021436:	2b02      	cmp	r3, #2
 8021438:	d901      	bls.n	802143e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 802143a:	2303      	movs	r3, #3
 802143c:	e045      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802143e:	4b06      	ldr	r3, [pc, #24]	; (8021458 <HAL_RCC_OscConfig+0x470>)
 8021440:	681b      	ldr	r3, [r3, #0]
 8021442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021446:	2b00      	cmp	r3, #0
 8021448:	d1f0      	bne.n	802142c <HAL_RCC_OscConfig+0x444>
 802144a:	e03d      	b.n	80214c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	699b      	ldr	r3, [r3, #24]
 8021450:	2b01      	cmp	r3, #1
 8021452:	d107      	bne.n	8021464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8021454:	2301      	movs	r3, #1
 8021456:	e038      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
 8021458:	40023800 	.word	0x40023800
 802145c:	40007000 	.word	0x40007000
 8021460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8021464:	4b1b      	ldr	r3, [pc, #108]	; (80214d4 <HAL_RCC_OscConfig+0x4ec>)
 8021466:	685b      	ldr	r3, [r3, #4]
 8021468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802146a:	687b      	ldr	r3, [r7, #4]
 802146c:	699b      	ldr	r3, [r3, #24]
 802146e:	2b01      	cmp	r3, #1
 8021470:	d028      	beq.n	80214c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021472:	68fb      	ldr	r3, [r7, #12]
 8021474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802147c:	429a      	cmp	r2, r3
 802147e:	d121      	bne.n	80214c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021480:	68fb      	ldr	r3, [r7, #12]
 8021482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802148a:	429a      	cmp	r2, r3
 802148c:	d11a      	bne.n	80214c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802148e:	68fa      	ldr	r2, [r7, #12]
 8021490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8021494:	4013      	ands	r3, r2
 8021496:	687a      	ldr	r2, [r7, #4]
 8021498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802149a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802149c:	4293      	cmp	r3, r2
 802149e:	d111      	bne.n	80214c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80214a0:	68fb      	ldr	r3, [r7, #12]
 80214a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80214a6:	687b      	ldr	r3, [r7, #4]
 80214a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214aa:	085b      	lsrs	r3, r3, #1
 80214ac:	3b01      	subs	r3, #1
 80214ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80214b0:	429a      	cmp	r2, r3
 80214b2:	d107      	bne.n	80214c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80214b4:	68fb      	ldr	r3, [r7, #12]
 80214b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80214be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80214c0:	429a      	cmp	r2, r3
 80214c2:	d001      	beq.n	80214c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80214c4:	2301      	movs	r3, #1
 80214c6:	e000      	b.n	80214ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80214c8:	2300      	movs	r3, #0
}
 80214ca:	4618      	mov	r0, r3
 80214cc:	3718      	adds	r7, #24
 80214ce:	46bd      	mov	sp, r7
 80214d0:	bd80      	pop	{r7, pc}
 80214d2:	bf00      	nop
 80214d4:	40023800 	.word	0x40023800

080214d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80214d8:	b580      	push	{r7, lr}
 80214da:	b084      	sub	sp, #16
 80214dc:	af00      	add	r7, sp, #0
 80214de:	6078      	str	r0, [r7, #4]
 80214e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80214e2:	687b      	ldr	r3, [r7, #4]
 80214e4:	2b00      	cmp	r3, #0
 80214e6:	d101      	bne.n	80214ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80214e8:	2301      	movs	r3, #1
 80214ea:	e0cc      	b.n	8021686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80214ec:	4b68      	ldr	r3, [pc, #416]	; (8021690 <HAL_RCC_ClockConfig+0x1b8>)
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	f003 0307 	and.w	r3, r3, #7
 80214f4:	683a      	ldr	r2, [r7, #0]
 80214f6:	429a      	cmp	r2, r3
 80214f8:	d90c      	bls.n	8021514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80214fa:	4b65      	ldr	r3, [pc, #404]	; (8021690 <HAL_RCC_ClockConfig+0x1b8>)
 80214fc:	683a      	ldr	r2, [r7, #0]
 80214fe:	b2d2      	uxtb	r2, r2
 8021500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021502:	4b63      	ldr	r3, [pc, #396]	; (8021690 <HAL_RCC_ClockConfig+0x1b8>)
 8021504:	681b      	ldr	r3, [r3, #0]
 8021506:	f003 0307 	and.w	r3, r3, #7
 802150a:	683a      	ldr	r2, [r7, #0]
 802150c:	429a      	cmp	r2, r3
 802150e:	d001      	beq.n	8021514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8021510:	2301      	movs	r3, #1
 8021512:	e0b8      	b.n	8021686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	f003 0302 	and.w	r3, r3, #2
 802151c:	2b00      	cmp	r3, #0
 802151e:	d020      	beq.n	8021562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	f003 0304 	and.w	r3, r3, #4
 8021528:	2b00      	cmp	r3, #0
 802152a:	d005      	beq.n	8021538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802152c:	4b59      	ldr	r3, [pc, #356]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 802152e:	689b      	ldr	r3, [r3, #8]
 8021530:	4a58      	ldr	r2, [pc, #352]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 8021532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8021536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	681b      	ldr	r3, [r3, #0]
 802153c:	f003 0308 	and.w	r3, r3, #8
 8021540:	2b00      	cmp	r3, #0
 8021542:	d005      	beq.n	8021550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8021544:	4b53      	ldr	r3, [pc, #332]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 8021546:	689b      	ldr	r3, [r3, #8]
 8021548:	4a52      	ldr	r2, [pc, #328]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 802154a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802154e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021550:	4b50      	ldr	r3, [pc, #320]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 8021552:	689b      	ldr	r3, [r3, #8]
 8021554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	689b      	ldr	r3, [r3, #8]
 802155c:	494d      	ldr	r1, [pc, #308]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 802155e:	4313      	orrs	r3, r2
 8021560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021562:	687b      	ldr	r3, [r7, #4]
 8021564:	681b      	ldr	r3, [r3, #0]
 8021566:	f003 0301 	and.w	r3, r3, #1
 802156a:	2b00      	cmp	r3, #0
 802156c:	d044      	beq.n	80215f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	685b      	ldr	r3, [r3, #4]
 8021572:	2b01      	cmp	r3, #1
 8021574:	d107      	bne.n	8021586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021576:	4b47      	ldr	r3, [pc, #284]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802157e:	2b00      	cmp	r3, #0
 8021580:	d119      	bne.n	80215b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8021582:	2301      	movs	r3, #1
 8021584:	e07f      	b.n	8021686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021586:	687b      	ldr	r3, [r7, #4]
 8021588:	685b      	ldr	r3, [r3, #4]
 802158a:	2b02      	cmp	r3, #2
 802158c:	d003      	beq.n	8021596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021592:	2b03      	cmp	r3, #3
 8021594:	d107      	bne.n	80215a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021596:	4b3f      	ldr	r3, [pc, #252]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 8021598:	681b      	ldr	r3, [r3, #0]
 802159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802159e:	2b00      	cmp	r3, #0
 80215a0:	d109      	bne.n	80215b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80215a2:	2301      	movs	r3, #1
 80215a4:	e06f      	b.n	8021686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80215a6:	4b3b      	ldr	r3, [pc, #236]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 80215a8:	681b      	ldr	r3, [r3, #0]
 80215aa:	f003 0302 	and.w	r3, r3, #2
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	d101      	bne.n	80215b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80215b2:	2301      	movs	r3, #1
 80215b4:	e067      	b.n	8021686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80215b6:	4b37      	ldr	r3, [pc, #220]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 80215b8:	689b      	ldr	r3, [r3, #8]
 80215ba:	f023 0203 	bic.w	r2, r3, #3
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	685b      	ldr	r3, [r3, #4]
 80215c2:	4934      	ldr	r1, [pc, #208]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 80215c4:	4313      	orrs	r3, r2
 80215c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80215c8:	f7ff fa4c 	bl	8020a64 <HAL_GetTick>
 80215cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80215ce:	e00a      	b.n	80215e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80215d0:	f7ff fa48 	bl	8020a64 <HAL_GetTick>
 80215d4:	4602      	mov	r2, r0
 80215d6:	68fb      	ldr	r3, [r7, #12]
 80215d8:	1ad3      	subs	r3, r2, r3
 80215da:	f241 3288 	movw	r2, #5000	; 0x1388
 80215de:	4293      	cmp	r3, r2
 80215e0:	d901      	bls.n	80215e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80215e2:	2303      	movs	r3, #3
 80215e4:	e04f      	b.n	8021686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80215e6:	4b2b      	ldr	r3, [pc, #172]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 80215e8:	689b      	ldr	r3, [r3, #8]
 80215ea:	f003 020c 	and.w	r2, r3, #12
 80215ee:	687b      	ldr	r3, [r7, #4]
 80215f0:	685b      	ldr	r3, [r3, #4]
 80215f2:	009b      	lsls	r3, r3, #2
 80215f4:	429a      	cmp	r2, r3
 80215f6:	d1eb      	bne.n	80215d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80215f8:	4b25      	ldr	r3, [pc, #148]	; (8021690 <HAL_RCC_ClockConfig+0x1b8>)
 80215fa:	681b      	ldr	r3, [r3, #0]
 80215fc:	f003 0307 	and.w	r3, r3, #7
 8021600:	683a      	ldr	r2, [r7, #0]
 8021602:	429a      	cmp	r2, r3
 8021604:	d20c      	bcs.n	8021620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021606:	4b22      	ldr	r3, [pc, #136]	; (8021690 <HAL_RCC_ClockConfig+0x1b8>)
 8021608:	683a      	ldr	r2, [r7, #0]
 802160a:	b2d2      	uxtb	r2, r2
 802160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802160e:	4b20      	ldr	r3, [pc, #128]	; (8021690 <HAL_RCC_ClockConfig+0x1b8>)
 8021610:	681b      	ldr	r3, [r3, #0]
 8021612:	f003 0307 	and.w	r3, r3, #7
 8021616:	683a      	ldr	r2, [r7, #0]
 8021618:	429a      	cmp	r2, r3
 802161a:	d001      	beq.n	8021620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802161c:	2301      	movs	r3, #1
 802161e:	e032      	b.n	8021686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021620:	687b      	ldr	r3, [r7, #4]
 8021622:	681b      	ldr	r3, [r3, #0]
 8021624:	f003 0304 	and.w	r3, r3, #4
 8021628:	2b00      	cmp	r3, #0
 802162a:	d008      	beq.n	802163e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802162c:	4b19      	ldr	r3, [pc, #100]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 802162e:	689b      	ldr	r3, [r3, #8]
 8021630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	68db      	ldr	r3, [r3, #12]
 8021638:	4916      	ldr	r1, [pc, #88]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 802163a:	4313      	orrs	r3, r2
 802163c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	681b      	ldr	r3, [r3, #0]
 8021642:	f003 0308 	and.w	r3, r3, #8
 8021646:	2b00      	cmp	r3, #0
 8021648:	d009      	beq.n	802165e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802164a:	4b12      	ldr	r3, [pc, #72]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 802164c:	689b      	ldr	r3, [r3, #8]
 802164e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	691b      	ldr	r3, [r3, #16]
 8021656:	00db      	lsls	r3, r3, #3
 8021658:	490e      	ldr	r1, [pc, #56]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 802165a:	4313      	orrs	r3, r2
 802165c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802165e:	f000 f821 	bl	80216a4 <HAL_RCC_GetSysClockFreq>
 8021662:	4602      	mov	r2, r0
 8021664:	4b0b      	ldr	r3, [pc, #44]	; (8021694 <HAL_RCC_ClockConfig+0x1bc>)
 8021666:	689b      	ldr	r3, [r3, #8]
 8021668:	091b      	lsrs	r3, r3, #4
 802166a:	f003 030f 	and.w	r3, r3, #15
 802166e:	490a      	ldr	r1, [pc, #40]	; (8021698 <HAL_RCC_ClockConfig+0x1c0>)
 8021670:	5ccb      	ldrb	r3, [r1, r3]
 8021672:	fa22 f303 	lsr.w	r3, r2, r3
 8021676:	4a09      	ldr	r2, [pc, #36]	; (802169c <HAL_RCC_ClockConfig+0x1c4>)
 8021678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802167a:	4b09      	ldr	r3, [pc, #36]	; (80216a0 <HAL_RCC_ClockConfig+0x1c8>)
 802167c:	681b      	ldr	r3, [r3, #0]
 802167e:	4618      	mov	r0, r3
 8021680:	f7ff f9ac 	bl	80209dc <HAL_InitTick>

  return HAL_OK;
 8021684:	2300      	movs	r3, #0
}
 8021686:	4618      	mov	r0, r3
 8021688:	3710      	adds	r7, #16
 802168a:	46bd      	mov	sp, r7
 802168c:	bd80      	pop	{r7, pc}
 802168e:	bf00      	nop
 8021690:	40023c00 	.word	0x40023c00
 8021694:	40023800 	.word	0x40023800
 8021698:	08022414 	.word	0x08022414
 802169c:	20000034 	.word	0x20000034
 80216a0:	20000038 	.word	0x20000038

080216a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80216a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80216a8:	b094      	sub	sp, #80	; 0x50
 80216aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80216ac:	2300      	movs	r3, #0
 80216ae:	647b      	str	r3, [r7, #68]	; 0x44
 80216b0:	2300      	movs	r3, #0
 80216b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80216b4:	2300      	movs	r3, #0
 80216b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80216b8:	2300      	movs	r3, #0
 80216ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80216bc:	4b79      	ldr	r3, [pc, #484]	; (80218a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80216be:	689b      	ldr	r3, [r3, #8]
 80216c0:	f003 030c 	and.w	r3, r3, #12
 80216c4:	2b08      	cmp	r3, #8
 80216c6:	d00d      	beq.n	80216e4 <HAL_RCC_GetSysClockFreq+0x40>
 80216c8:	2b08      	cmp	r3, #8
 80216ca:	f200 80e1 	bhi.w	8021890 <HAL_RCC_GetSysClockFreq+0x1ec>
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d002      	beq.n	80216d8 <HAL_RCC_GetSysClockFreq+0x34>
 80216d2:	2b04      	cmp	r3, #4
 80216d4:	d003      	beq.n	80216de <HAL_RCC_GetSysClockFreq+0x3a>
 80216d6:	e0db      	b.n	8021890 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80216d8:	4b73      	ldr	r3, [pc, #460]	; (80218a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80216da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80216dc:	e0db      	b.n	8021896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80216de:	4b73      	ldr	r3, [pc, #460]	; (80218ac <HAL_RCC_GetSysClockFreq+0x208>)
 80216e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80216e2:	e0d8      	b.n	8021896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80216e4:	4b6f      	ldr	r3, [pc, #444]	; (80218a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80216e6:	685b      	ldr	r3, [r3, #4]
 80216e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80216ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80216ee:	4b6d      	ldr	r3, [pc, #436]	; (80218a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80216f0:	685b      	ldr	r3, [r3, #4]
 80216f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	d063      	beq.n	80217c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80216fa:	4b6a      	ldr	r3, [pc, #424]	; (80218a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80216fc:	685b      	ldr	r3, [r3, #4]
 80216fe:	099b      	lsrs	r3, r3, #6
 8021700:	2200      	movs	r2, #0
 8021702:	63bb      	str	r3, [r7, #56]	; 0x38
 8021704:	63fa      	str	r2, [r7, #60]	; 0x3c
 8021706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802170c:	633b      	str	r3, [r7, #48]	; 0x30
 802170e:	2300      	movs	r3, #0
 8021710:	637b      	str	r3, [r7, #52]	; 0x34
 8021712:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8021716:	4622      	mov	r2, r4
 8021718:	462b      	mov	r3, r5
 802171a:	f04f 0000 	mov.w	r0, #0
 802171e:	f04f 0100 	mov.w	r1, #0
 8021722:	0159      	lsls	r1, r3, #5
 8021724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8021728:	0150      	lsls	r0, r2, #5
 802172a:	4602      	mov	r2, r0
 802172c:	460b      	mov	r3, r1
 802172e:	4621      	mov	r1, r4
 8021730:	1a51      	subs	r1, r2, r1
 8021732:	6139      	str	r1, [r7, #16]
 8021734:	4629      	mov	r1, r5
 8021736:	eb63 0301 	sbc.w	r3, r3, r1
 802173a:	617b      	str	r3, [r7, #20]
 802173c:	f04f 0200 	mov.w	r2, #0
 8021740:	f04f 0300 	mov.w	r3, #0
 8021744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021748:	4659      	mov	r1, fp
 802174a:	018b      	lsls	r3, r1, #6
 802174c:	4651      	mov	r1, sl
 802174e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8021752:	4651      	mov	r1, sl
 8021754:	018a      	lsls	r2, r1, #6
 8021756:	4651      	mov	r1, sl
 8021758:	ebb2 0801 	subs.w	r8, r2, r1
 802175c:	4659      	mov	r1, fp
 802175e:	eb63 0901 	sbc.w	r9, r3, r1
 8021762:	f04f 0200 	mov.w	r2, #0
 8021766:	f04f 0300 	mov.w	r3, #0
 802176a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802176e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021776:	4690      	mov	r8, r2
 8021778:	4699      	mov	r9, r3
 802177a:	4623      	mov	r3, r4
 802177c:	eb18 0303 	adds.w	r3, r8, r3
 8021780:	60bb      	str	r3, [r7, #8]
 8021782:	462b      	mov	r3, r5
 8021784:	eb49 0303 	adc.w	r3, r9, r3
 8021788:	60fb      	str	r3, [r7, #12]
 802178a:	f04f 0200 	mov.w	r2, #0
 802178e:	f04f 0300 	mov.w	r3, #0
 8021792:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8021796:	4629      	mov	r1, r5
 8021798:	024b      	lsls	r3, r1, #9
 802179a:	4621      	mov	r1, r4
 802179c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80217a0:	4621      	mov	r1, r4
 80217a2:	024a      	lsls	r2, r1, #9
 80217a4:	4610      	mov	r0, r2
 80217a6:	4619      	mov	r1, r3
 80217a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80217aa:	2200      	movs	r2, #0
 80217ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80217ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80217b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80217b4:	f7fe fd10 	bl	80201d8 <__aeabi_uldivmod>
 80217b8:	4602      	mov	r2, r0
 80217ba:	460b      	mov	r3, r1
 80217bc:	4613      	mov	r3, r2
 80217be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80217c0:	e058      	b.n	8021874 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80217c2:	4b38      	ldr	r3, [pc, #224]	; (80218a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80217c4:	685b      	ldr	r3, [r3, #4]
 80217c6:	099b      	lsrs	r3, r3, #6
 80217c8:	2200      	movs	r2, #0
 80217ca:	4618      	mov	r0, r3
 80217cc:	4611      	mov	r1, r2
 80217ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80217d2:	623b      	str	r3, [r7, #32]
 80217d4:	2300      	movs	r3, #0
 80217d6:	627b      	str	r3, [r7, #36]	; 0x24
 80217d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80217dc:	4642      	mov	r2, r8
 80217de:	464b      	mov	r3, r9
 80217e0:	f04f 0000 	mov.w	r0, #0
 80217e4:	f04f 0100 	mov.w	r1, #0
 80217e8:	0159      	lsls	r1, r3, #5
 80217ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80217ee:	0150      	lsls	r0, r2, #5
 80217f0:	4602      	mov	r2, r0
 80217f2:	460b      	mov	r3, r1
 80217f4:	4641      	mov	r1, r8
 80217f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80217fa:	4649      	mov	r1, r9
 80217fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8021800:	f04f 0200 	mov.w	r2, #0
 8021804:	f04f 0300 	mov.w	r3, #0
 8021808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 802180c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8021810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8021814:	ebb2 040a 	subs.w	r4, r2, sl
 8021818:	eb63 050b 	sbc.w	r5, r3, fp
 802181c:	f04f 0200 	mov.w	r2, #0
 8021820:	f04f 0300 	mov.w	r3, #0
 8021824:	00eb      	lsls	r3, r5, #3
 8021826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802182a:	00e2      	lsls	r2, r4, #3
 802182c:	4614      	mov	r4, r2
 802182e:	461d      	mov	r5, r3
 8021830:	4643      	mov	r3, r8
 8021832:	18e3      	adds	r3, r4, r3
 8021834:	603b      	str	r3, [r7, #0]
 8021836:	464b      	mov	r3, r9
 8021838:	eb45 0303 	adc.w	r3, r5, r3
 802183c:	607b      	str	r3, [r7, #4]
 802183e:	f04f 0200 	mov.w	r2, #0
 8021842:	f04f 0300 	mov.w	r3, #0
 8021846:	e9d7 4500 	ldrd	r4, r5, [r7]
 802184a:	4629      	mov	r1, r5
 802184c:	028b      	lsls	r3, r1, #10
 802184e:	4621      	mov	r1, r4
 8021850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8021854:	4621      	mov	r1, r4
 8021856:	028a      	lsls	r2, r1, #10
 8021858:	4610      	mov	r0, r2
 802185a:	4619      	mov	r1, r3
 802185c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802185e:	2200      	movs	r2, #0
 8021860:	61bb      	str	r3, [r7, #24]
 8021862:	61fa      	str	r2, [r7, #28]
 8021864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8021868:	f7fe fcb6 	bl	80201d8 <__aeabi_uldivmod>
 802186c:	4602      	mov	r2, r0
 802186e:	460b      	mov	r3, r1
 8021870:	4613      	mov	r3, r2
 8021872:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8021874:	4b0b      	ldr	r3, [pc, #44]	; (80218a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8021876:	685b      	ldr	r3, [r3, #4]
 8021878:	0c1b      	lsrs	r3, r3, #16
 802187a:	f003 0303 	and.w	r3, r3, #3
 802187e:	3301      	adds	r3, #1
 8021880:	005b      	lsls	r3, r3, #1
 8021882:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8021884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021888:	fbb2 f3f3 	udiv	r3, r2, r3
 802188c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 802188e:	e002      	b.n	8021896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8021890:	4b05      	ldr	r3, [pc, #20]	; (80218a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8021892:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8021894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8021896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8021898:	4618      	mov	r0, r3
 802189a:	3750      	adds	r7, #80	; 0x50
 802189c:	46bd      	mov	sp, r7
 802189e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80218a2:	bf00      	nop
 80218a4:	40023800 	.word	0x40023800
 80218a8:	00f42400 	.word	0x00f42400
 80218ac:	007a1200 	.word	0x007a1200

080218b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80218b0:	b480      	push	{r7}
 80218b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80218b4:	4b03      	ldr	r3, [pc, #12]	; (80218c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80218b6:	681b      	ldr	r3, [r3, #0]
}
 80218b8:	4618      	mov	r0, r3
 80218ba:	46bd      	mov	sp, r7
 80218bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218c0:	4770      	bx	lr
 80218c2:	bf00      	nop
 80218c4:	20000034 	.word	0x20000034

080218c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80218c8:	b580      	push	{r7, lr}
 80218ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80218cc:	f7ff fff0 	bl	80218b0 <HAL_RCC_GetHCLKFreq>
 80218d0:	4602      	mov	r2, r0
 80218d2:	4b05      	ldr	r3, [pc, #20]	; (80218e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80218d4:	689b      	ldr	r3, [r3, #8]
 80218d6:	0a9b      	lsrs	r3, r3, #10
 80218d8:	f003 0307 	and.w	r3, r3, #7
 80218dc:	4903      	ldr	r1, [pc, #12]	; (80218ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80218de:	5ccb      	ldrb	r3, [r1, r3]
 80218e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80218e4:	4618      	mov	r0, r3
 80218e6:	bd80      	pop	{r7, pc}
 80218e8:	40023800 	.word	0x40023800
 80218ec:	08022424 	.word	0x08022424

080218f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80218f4:	f7ff ffdc 	bl	80218b0 <HAL_RCC_GetHCLKFreq>
 80218f8:	4602      	mov	r2, r0
 80218fa:	4b05      	ldr	r3, [pc, #20]	; (8021910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80218fc:	689b      	ldr	r3, [r3, #8]
 80218fe:	0b5b      	lsrs	r3, r3, #13
 8021900:	f003 0307 	and.w	r3, r3, #7
 8021904:	4903      	ldr	r1, [pc, #12]	; (8021914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8021906:	5ccb      	ldrb	r3, [r1, r3]
 8021908:	fa22 f303 	lsr.w	r3, r2, r3
}
 802190c:	4618      	mov	r0, r3
 802190e:	bd80      	pop	{r7, pc}
 8021910:	40023800 	.word	0x40023800
 8021914:	08022424 	.word	0x08022424

08021918 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8021918:	b580      	push	{r7, lr}
 802191a:	b082      	sub	sp, #8
 802191c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 802191e:	f7ff f8a1 	bl	8020a64 <HAL_GetTick>
 8021922:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8021924:	4b5d      	ldr	r3, [pc, #372]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	4a5c      	ldr	r2, [pc, #368]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 802192a:	f043 0301 	orr.w	r3, r3, #1
 802192e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8021930:	e008      	b.n	8021944 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021932:	f7ff f897 	bl	8020a64 <HAL_GetTick>
 8021936:	4602      	mov	r2, r0
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	1ad3      	subs	r3, r2, r3
 802193c:	2b02      	cmp	r3, #2
 802193e:	d901      	bls.n	8021944 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8021940:	2303      	movs	r3, #3
 8021942:	e0a7      	b.n	8021a94 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8021944:	4b55      	ldr	r3, [pc, #340]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021946:	681b      	ldr	r3, [r3, #0]
 8021948:	f003 0302 	and.w	r3, r3, #2
 802194c:	2b00      	cmp	r3, #0
 802194e:	d0f0      	beq.n	8021932 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8021950:	4b52      	ldr	r3, [pc, #328]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021952:	681b      	ldr	r3, [r3, #0]
 8021954:	4a51      	ldr	r2, [pc, #324]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802195a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 802195c:	f7ff f882 	bl	8020a64 <HAL_GetTick>
 8021960:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8021962:	4b4e      	ldr	r3, [pc, #312]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021964:	2200      	movs	r2, #0
 8021966:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8021968:	e00a      	b.n	8021980 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802196a:	f7ff f87b 	bl	8020a64 <HAL_GetTick>
 802196e:	4602      	mov	r2, r0
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	1ad3      	subs	r3, r2, r3
 8021974:	f241 3288 	movw	r2, #5000	; 0x1388
 8021978:	4293      	cmp	r3, r2
 802197a:	d901      	bls.n	8021980 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 802197c:	2303      	movs	r3, #3
 802197e:	e089      	b.n	8021a94 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8021980:	4b46      	ldr	r3, [pc, #280]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021982:	689b      	ldr	r3, [r3, #8]
 8021984:	f003 030c 	and.w	r3, r3, #12
 8021988:	2b00      	cmp	r3, #0
 802198a:	d1ee      	bne.n	802196a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 802198c:	f7ff f86a 	bl	8020a64 <HAL_GetTick>
 8021990:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8021992:	4b42      	ldr	r3, [pc, #264]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021994:	681b      	ldr	r3, [r3, #0]
 8021996:	4a41      	ldr	r2, [pc, #260]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021998:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 802199c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 802199e:	e008      	b.n	80219b2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80219a0:	f7ff f860 	bl	8020a64 <HAL_GetTick>
 80219a4:	4602      	mov	r2, r0
 80219a6:	687b      	ldr	r3, [r7, #4]
 80219a8:	1ad3      	subs	r3, r2, r3
 80219aa:	2b64      	cmp	r3, #100	; 0x64
 80219ac:	d901      	bls.n	80219b2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80219ae:	2303      	movs	r3, #3
 80219b0:	e070      	b.n	8021a94 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80219b2:	4b3a      	ldr	r3, [pc, #232]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 80219b4:	681b      	ldr	r3, [r3, #0]
 80219b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80219ba:	2b00      	cmp	r3, #0
 80219bc:	d1f0      	bne.n	80219a0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80219be:	f7ff f851 	bl	8020a64 <HAL_GetTick>
 80219c2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80219c4:	4b35      	ldr	r3, [pc, #212]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 80219c6:	681b      	ldr	r3, [r3, #0]
 80219c8:	4a34      	ldr	r2, [pc, #208]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 80219ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80219ce:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80219d0:	e008      	b.n	80219e4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80219d2:	f7ff f847 	bl	8020a64 <HAL_GetTick>
 80219d6:	4602      	mov	r2, r0
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	1ad3      	subs	r3, r2, r3
 80219dc:	2b02      	cmp	r3, #2
 80219de:	d901      	bls.n	80219e4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80219e0:	2303      	movs	r3, #3
 80219e2:	e057      	b.n	8021a94 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80219e4:	4b2d      	ldr	r3, [pc, #180]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 80219e6:	681b      	ldr	r3, [r3, #0]
 80219e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d1f0      	bne.n	80219d2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80219f0:	f7ff f838 	bl	8020a64 <HAL_GetTick>
 80219f4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80219f6:	4b29      	ldr	r3, [pc, #164]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 80219f8:	681b      	ldr	r3, [r3, #0]
 80219fa:	4a28      	ldr	r2, [pc, #160]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 80219fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8021a00:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8021a02:	e008      	b.n	8021a16 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8021a04:	f7ff f82e 	bl	8020a64 <HAL_GetTick>
 8021a08:	4602      	mov	r2, r0
 8021a0a:	687b      	ldr	r3, [r7, #4]
 8021a0c:	1ad3      	subs	r3, r2, r3
 8021a0e:	2b02      	cmp	r3, #2
 8021a10:	d901      	bls.n	8021a16 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8021a12:	2303      	movs	r3, #3
 8021a14:	e03e      	b.n	8021a94 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8021a16:	4b21      	ldr	r3, [pc, #132]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a18:	681b      	ldr	r3, [r3, #0]
 8021a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d1f0      	bne.n	8021a04 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8021a22:	4b1e      	ldr	r3, [pc, #120]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a24:	4a1e      	ldr	r2, [pc, #120]	; (8021aa0 <HAL_RCC_DeInit+0x188>)
 8021a26:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8021a28:	4b1c      	ldr	r3, [pc, #112]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a2a:	4a1e      	ldr	r2, [pc, #120]	; (8021aa4 <HAL_RCC_DeInit+0x18c>)
 8021a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8021a30:	4b1a      	ldr	r3, [pc, #104]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a32:	68db      	ldr	r3, [r3, #12]
 8021a34:	4a19      	ldr	r2, [pc, #100]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a36:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8021a3a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8021a3c:	4b17      	ldr	r3, [pc, #92]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a3e:	68db      	ldr	r3, [r3, #12]
 8021a40:	4a16      	ldr	r2, [pc, #88]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021a46:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8021a48:	4b14      	ldr	r3, [pc, #80]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a4a:	68db      	ldr	r3, [r3, #12]
 8021a4c:	4a13      	ldr	r2, [pc, #76]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a4e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8021a52:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8021a54:	4b11      	ldr	r3, [pc, #68]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a56:	68db      	ldr	r3, [r3, #12]
 8021a58:	4a10      	ldr	r2, [pc, #64]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8021a5e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8021a60:	4b0e      	ldr	r3, [pc, #56]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021a64:	4a0d      	ldr	r2, [pc, #52]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a66:	f023 0301 	bic.w	r3, r3, #1
 8021a6a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8021a6c:	4b0b      	ldr	r3, [pc, #44]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021a70:	4a0a      	ldr	r2, [pc, #40]	; (8021a9c <HAL_RCC_DeInit+0x184>)
 8021a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8021a76:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8021a78:	4b0b      	ldr	r3, [pc, #44]	; (8021aa8 <HAL_RCC_DeInit+0x190>)
 8021a7a:	4a0c      	ldr	r2, [pc, #48]	; (8021aac <HAL_RCC_DeInit+0x194>)
 8021a7c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8021a7e:	4b0c      	ldr	r3, [pc, #48]	; (8021ab0 <HAL_RCC_DeInit+0x198>)
 8021a80:	681b      	ldr	r3, [r3, #0]
 8021a82:	4618      	mov	r0, r3
 8021a84:	f7fe ffaa 	bl	80209dc <HAL_InitTick>
 8021a88:	4603      	mov	r3, r0
 8021a8a:	2b00      	cmp	r3, #0
 8021a8c:	d001      	beq.n	8021a92 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8021a8e:	2301      	movs	r3, #1
 8021a90:	e000      	b.n	8021a94 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8021a92:	2300      	movs	r3, #0
  }
}
 8021a94:	4618      	mov	r0, r3
 8021a96:	3708      	adds	r7, #8
 8021a98:	46bd      	mov	sp, r7
 8021a9a:	bd80      	pop	{r7, pc}
 8021a9c:	40023800 	.word	0x40023800
 8021aa0:	04003010 	.word	0x04003010
 8021aa4:	20003000 	.word	0x20003000
 8021aa8:	20000034 	.word	0x20000034
 8021aac:	00f42400 	.word	0x00f42400
 8021ab0:	20000038 	.word	0x20000038

08021ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021ab4:	b580      	push	{r7, lr}
 8021ab6:	b082      	sub	sp, #8
 8021ab8:	af00      	add	r7, sp, #0
 8021aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d101      	bne.n	8021ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021ac2:	2301      	movs	r3, #1
 8021ac4:	e03f      	b.n	8021b46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021acc:	b2db      	uxtb	r3, r3
 8021ace:	2b00      	cmp	r3, #0
 8021ad0:	d106      	bne.n	8021ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	2200      	movs	r2, #0
 8021ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021ada:	6878      	ldr	r0, [r7, #4]
 8021adc:	f7fe fe7a 	bl	80207d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	2224      	movs	r2, #36	; 0x24
 8021ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	681b      	ldr	r3, [r3, #0]
 8021aec:	68da      	ldr	r2, [r3, #12]
 8021aee:	687b      	ldr	r3, [r7, #4]
 8021af0:	681b      	ldr	r3, [r3, #0]
 8021af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021af8:	6878      	ldr	r0, [r7, #4]
 8021afa:	f000 f9cb 	bl	8021e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	691a      	ldr	r2, [r3, #16]
 8021b04:	687b      	ldr	r3, [r7, #4]
 8021b06:	681b      	ldr	r3, [r3, #0]
 8021b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8021b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021b0e:	687b      	ldr	r3, [r7, #4]
 8021b10:	681b      	ldr	r3, [r3, #0]
 8021b12:	695a      	ldr	r2, [r3, #20]
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	681b      	ldr	r3, [r3, #0]
 8021b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8021b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	681b      	ldr	r3, [r3, #0]
 8021b22:	68da      	ldr	r2, [r3, #12]
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	681b      	ldr	r3, [r3, #0]
 8021b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	2200      	movs	r2, #0
 8021b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	2220      	movs	r2, #32
 8021b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	2220      	movs	r2, #32
 8021b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8021b44:	2300      	movs	r3, #0
}
 8021b46:	4618      	mov	r0, r3
 8021b48:	3708      	adds	r7, #8
 8021b4a:	46bd      	mov	sp, r7
 8021b4c:	bd80      	pop	{r7, pc}

08021b4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021b4e:	b580      	push	{r7, lr}
 8021b50:	b08a      	sub	sp, #40	; 0x28
 8021b52:	af02      	add	r7, sp, #8
 8021b54:	60f8      	str	r0, [r7, #12]
 8021b56:	60b9      	str	r1, [r7, #8]
 8021b58:	603b      	str	r3, [r7, #0]
 8021b5a:	4613      	mov	r3, r2
 8021b5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8021b5e:	2300      	movs	r3, #0
 8021b60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021b62:	68fb      	ldr	r3, [r7, #12]
 8021b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021b68:	b2db      	uxtb	r3, r3
 8021b6a:	2b20      	cmp	r3, #32
 8021b6c:	d17c      	bne.n	8021c68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8021b6e:	68bb      	ldr	r3, [r7, #8]
 8021b70:	2b00      	cmp	r3, #0
 8021b72:	d002      	beq.n	8021b7a <HAL_UART_Transmit+0x2c>
 8021b74:	88fb      	ldrh	r3, [r7, #6]
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d101      	bne.n	8021b7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8021b7a:	2301      	movs	r3, #1
 8021b7c:	e075      	b.n	8021c6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021b7e:	68fb      	ldr	r3, [r7, #12]
 8021b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021b84:	2b01      	cmp	r3, #1
 8021b86:	d101      	bne.n	8021b8c <HAL_UART_Transmit+0x3e>
 8021b88:	2302      	movs	r3, #2
 8021b8a:	e06e      	b.n	8021c6a <HAL_UART_Transmit+0x11c>
 8021b8c:	68fb      	ldr	r3, [r7, #12]
 8021b8e:	2201      	movs	r2, #1
 8021b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021b94:	68fb      	ldr	r3, [r7, #12]
 8021b96:	2200      	movs	r2, #0
 8021b98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021b9a:	68fb      	ldr	r3, [r7, #12]
 8021b9c:	2221      	movs	r2, #33	; 0x21
 8021b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8021ba2:	f7fe ff5f 	bl	8020a64 <HAL_GetTick>
 8021ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8021ba8:	68fb      	ldr	r3, [r7, #12]
 8021baa:	88fa      	ldrh	r2, [r7, #6]
 8021bac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8021bae:	68fb      	ldr	r3, [r7, #12]
 8021bb0:	88fa      	ldrh	r2, [r7, #6]
 8021bb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021bb4:	68fb      	ldr	r3, [r7, #12]
 8021bb6:	689b      	ldr	r3, [r3, #8]
 8021bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021bbc:	d108      	bne.n	8021bd0 <HAL_UART_Transmit+0x82>
 8021bbe:	68fb      	ldr	r3, [r7, #12]
 8021bc0:	691b      	ldr	r3, [r3, #16]
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	d104      	bne.n	8021bd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8021bc6:	2300      	movs	r3, #0
 8021bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8021bca:	68bb      	ldr	r3, [r7, #8]
 8021bcc:	61bb      	str	r3, [r7, #24]
 8021bce:	e003      	b.n	8021bd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8021bd0:	68bb      	ldr	r3, [r7, #8]
 8021bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8021bd4:	2300      	movs	r3, #0
 8021bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021bd8:	68fb      	ldr	r3, [r7, #12]
 8021bda:	2200      	movs	r2, #0
 8021bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8021be0:	e02a      	b.n	8021c38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021be2:	683b      	ldr	r3, [r7, #0]
 8021be4:	9300      	str	r3, [sp, #0]
 8021be6:	697b      	ldr	r3, [r7, #20]
 8021be8:	2200      	movs	r2, #0
 8021bea:	2180      	movs	r1, #128	; 0x80
 8021bec:	68f8      	ldr	r0, [r7, #12]
 8021bee:	f000 f8e2 	bl	8021db6 <UART_WaitOnFlagUntilTimeout>
 8021bf2:	4603      	mov	r3, r0
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d001      	beq.n	8021bfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8021bf8:	2303      	movs	r3, #3
 8021bfa:	e036      	b.n	8021c6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8021bfc:	69fb      	ldr	r3, [r7, #28]
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	d10b      	bne.n	8021c1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8021c02:	69bb      	ldr	r3, [r7, #24]
 8021c04:	881b      	ldrh	r3, [r3, #0]
 8021c06:	461a      	mov	r2, r3
 8021c08:	68fb      	ldr	r3, [r7, #12]
 8021c0a:	681b      	ldr	r3, [r3, #0]
 8021c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8021c12:	69bb      	ldr	r3, [r7, #24]
 8021c14:	3302      	adds	r3, #2
 8021c16:	61bb      	str	r3, [r7, #24]
 8021c18:	e007      	b.n	8021c2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8021c1a:	69fb      	ldr	r3, [r7, #28]
 8021c1c:	781a      	ldrb	r2, [r3, #0]
 8021c1e:	68fb      	ldr	r3, [r7, #12]
 8021c20:	681b      	ldr	r3, [r3, #0]
 8021c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8021c24:	69fb      	ldr	r3, [r7, #28]
 8021c26:	3301      	adds	r3, #1
 8021c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8021c2a:	68fb      	ldr	r3, [r7, #12]
 8021c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021c2e:	b29b      	uxth	r3, r3
 8021c30:	3b01      	subs	r3, #1
 8021c32:	b29a      	uxth	r2, r3
 8021c34:	68fb      	ldr	r3, [r7, #12]
 8021c36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8021c38:	68fb      	ldr	r3, [r7, #12]
 8021c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021c3c:	b29b      	uxth	r3, r3
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d1cf      	bne.n	8021be2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8021c42:	683b      	ldr	r3, [r7, #0]
 8021c44:	9300      	str	r3, [sp, #0]
 8021c46:	697b      	ldr	r3, [r7, #20]
 8021c48:	2200      	movs	r2, #0
 8021c4a:	2140      	movs	r1, #64	; 0x40
 8021c4c:	68f8      	ldr	r0, [r7, #12]
 8021c4e:	f000 f8b2 	bl	8021db6 <UART_WaitOnFlagUntilTimeout>
 8021c52:	4603      	mov	r3, r0
 8021c54:	2b00      	cmp	r3, #0
 8021c56:	d001      	beq.n	8021c5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8021c58:	2303      	movs	r3, #3
 8021c5a:	e006      	b.n	8021c6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8021c5c:	68fb      	ldr	r3, [r7, #12]
 8021c5e:	2220      	movs	r2, #32
 8021c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8021c64:	2300      	movs	r3, #0
 8021c66:	e000      	b.n	8021c6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8021c68:	2302      	movs	r3, #2
  }
}
 8021c6a:	4618      	mov	r0, r3
 8021c6c:	3720      	adds	r7, #32
 8021c6e:	46bd      	mov	sp, r7
 8021c70:	bd80      	pop	{r7, pc}

08021c72 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021c72:	b580      	push	{r7, lr}
 8021c74:	b08a      	sub	sp, #40	; 0x28
 8021c76:	af02      	add	r7, sp, #8
 8021c78:	60f8      	str	r0, [r7, #12]
 8021c7a:	60b9      	str	r1, [r7, #8]
 8021c7c:	603b      	str	r3, [r7, #0]
 8021c7e:	4613      	mov	r3, r2
 8021c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8021c82:	2300      	movs	r3, #0
 8021c84:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8021c86:	68fb      	ldr	r3, [r7, #12]
 8021c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021c8c:	b2db      	uxtb	r3, r3
 8021c8e:	2b20      	cmp	r3, #32
 8021c90:	f040 808c 	bne.w	8021dac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8021c94:	68bb      	ldr	r3, [r7, #8]
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d002      	beq.n	8021ca0 <HAL_UART_Receive+0x2e>
 8021c9a:	88fb      	ldrh	r3, [r7, #6]
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d101      	bne.n	8021ca4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8021ca0:	2301      	movs	r3, #1
 8021ca2:	e084      	b.n	8021dae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021ca4:	68fb      	ldr	r3, [r7, #12]
 8021ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021caa:	2b01      	cmp	r3, #1
 8021cac:	d101      	bne.n	8021cb2 <HAL_UART_Receive+0x40>
 8021cae:	2302      	movs	r3, #2
 8021cb0:	e07d      	b.n	8021dae <HAL_UART_Receive+0x13c>
 8021cb2:	68fb      	ldr	r3, [r7, #12]
 8021cb4:	2201      	movs	r2, #1
 8021cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021cba:	68fb      	ldr	r3, [r7, #12]
 8021cbc:	2200      	movs	r2, #0
 8021cbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	2222      	movs	r2, #34	; 0x22
 8021cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021cc8:	68fb      	ldr	r3, [r7, #12]
 8021cca:	2200      	movs	r2, #0
 8021ccc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8021cce:	f7fe fec9 	bl	8020a64 <HAL_GetTick>
 8021cd2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8021cd4:	68fb      	ldr	r3, [r7, #12]
 8021cd6:	88fa      	ldrh	r2, [r7, #6]
 8021cd8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8021cda:	68fb      	ldr	r3, [r7, #12]
 8021cdc:	88fa      	ldrh	r2, [r7, #6]
 8021cde:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021ce0:	68fb      	ldr	r3, [r7, #12]
 8021ce2:	689b      	ldr	r3, [r3, #8]
 8021ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021ce8:	d108      	bne.n	8021cfc <HAL_UART_Receive+0x8a>
 8021cea:	68fb      	ldr	r3, [r7, #12]
 8021cec:	691b      	ldr	r3, [r3, #16]
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d104      	bne.n	8021cfc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8021cf2:	2300      	movs	r3, #0
 8021cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8021cf6:	68bb      	ldr	r3, [r7, #8]
 8021cf8:	61bb      	str	r3, [r7, #24]
 8021cfa:	e003      	b.n	8021d04 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8021cfc:	68bb      	ldr	r3, [r7, #8]
 8021cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8021d00:	2300      	movs	r3, #0
 8021d02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021d04:	68fb      	ldr	r3, [r7, #12]
 8021d06:	2200      	movs	r2, #0
 8021d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8021d0c:	e043      	b.n	8021d96 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8021d0e:	683b      	ldr	r3, [r7, #0]
 8021d10:	9300      	str	r3, [sp, #0]
 8021d12:	697b      	ldr	r3, [r7, #20]
 8021d14:	2200      	movs	r2, #0
 8021d16:	2120      	movs	r1, #32
 8021d18:	68f8      	ldr	r0, [r7, #12]
 8021d1a:	f000 f84c 	bl	8021db6 <UART_WaitOnFlagUntilTimeout>
 8021d1e:	4603      	mov	r3, r0
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	d001      	beq.n	8021d28 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8021d24:	2303      	movs	r3, #3
 8021d26:	e042      	b.n	8021dae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8021d28:	69fb      	ldr	r3, [r7, #28]
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d10c      	bne.n	8021d48 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8021d2e:	68fb      	ldr	r3, [r7, #12]
 8021d30:	681b      	ldr	r3, [r3, #0]
 8021d32:	685b      	ldr	r3, [r3, #4]
 8021d34:	b29b      	uxth	r3, r3
 8021d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021d3a:	b29a      	uxth	r2, r3
 8021d3c:	69bb      	ldr	r3, [r7, #24]
 8021d3e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8021d40:	69bb      	ldr	r3, [r7, #24]
 8021d42:	3302      	adds	r3, #2
 8021d44:	61bb      	str	r3, [r7, #24]
 8021d46:	e01f      	b.n	8021d88 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8021d48:	68fb      	ldr	r3, [r7, #12]
 8021d4a:	689b      	ldr	r3, [r3, #8]
 8021d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021d50:	d007      	beq.n	8021d62 <HAL_UART_Receive+0xf0>
 8021d52:	68fb      	ldr	r3, [r7, #12]
 8021d54:	689b      	ldr	r3, [r3, #8]
 8021d56:	2b00      	cmp	r3, #0
 8021d58:	d10a      	bne.n	8021d70 <HAL_UART_Receive+0xfe>
 8021d5a:	68fb      	ldr	r3, [r7, #12]
 8021d5c:	691b      	ldr	r3, [r3, #16]
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d106      	bne.n	8021d70 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8021d62:	68fb      	ldr	r3, [r7, #12]
 8021d64:	681b      	ldr	r3, [r3, #0]
 8021d66:	685b      	ldr	r3, [r3, #4]
 8021d68:	b2da      	uxtb	r2, r3
 8021d6a:	69fb      	ldr	r3, [r7, #28]
 8021d6c:	701a      	strb	r2, [r3, #0]
 8021d6e:	e008      	b.n	8021d82 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021d70:	68fb      	ldr	r3, [r7, #12]
 8021d72:	681b      	ldr	r3, [r3, #0]
 8021d74:	685b      	ldr	r3, [r3, #4]
 8021d76:	b2db      	uxtb	r3, r3
 8021d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021d7c:	b2da      	uxtb	r2, r3
 8021d7e:	69fb      	ldr	r3, [r7, #28]
 8021d80:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8021d82:	69fb      	ldr	r3, [r7, #28]
 8021d84:	3301      	adds	r3, #1
 8021d86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8021d88:	68fb      	ldr	r3, [r7, #12]
 8021d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021d8c:	b29b      	uxth	r3, r3
 8021d8e:	3b01      	subs	r3, #1
 8021d90:	b29a      	uxth	r2, r3
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8021d96:	68fb      	ldr	r3, [r7, #12]
 8021d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021d9a:	b29b      	uxth	r3, r3
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	d1b6      	bne.n	8021d0e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	2220      	movs	r2, #32
 8021da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8021da8:	2300      	movs	r3, #0
 8021daa:	e000      	b.n	8021dae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8021dac:	2302      	movs	r3, #2
  }
}
 8021dae:	4618      	mov	r0, r3
 8021db0:	3720      	adds	r7, #32
 8021db2:	46bd      	mov	sp, r7
 8021db4:	bd80      	pop	{r7, pc}

08021db6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8021db6:	b580      	push	{r7, lr}
 8021db8:	b090      	sub	sp, #64	; 0x40
 8021dba:	af00      	add	r7, sp, #0
 8021dbc:	60f8      	str	r0, [r7, #12]
 8021dbe:	60b9      	str	r1, [r7, #8]
 8021dc0:	603b      	str	r3, [r7, #0]
 8021dc2:	4613      	mov	r3, r2
 8021dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021dc6:	e050      	b.n	8021e6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8021dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021dce:	d04c      	beq.n	8021e6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8021dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021dd2:	2b00      	cmp	r3, #0
 8021dd4:	d007      	beq.n	8021de6 <UART_WaitOnFlagUntilTimeout+0x30>
 8021dd6:	f7fe fe45 	bl	8020a64 <HAL_GetTick>
 8021dda:	4602      	mov	r2, r0
 8021ddc:	683b      	ldr	r3, [r7, #0]
 8021dde:	1ad3      	subs	r3, r2, r3
 8021de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021de2:	429a      	cmp	r2, r3
 8021de4:	d241      	bcs.n	8021e6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8021de6:	68fb      	ldr	r3, [r7, #12]
 8021de8:	681b      	ldr	r3, [r3, #0]
 8021dea:	330c      	adds	r3, #12
 8021dec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021df0:	e853 3f00 	ldrex	r3, [r3]
 8021df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8021df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8021dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021dfe:	68fb      	ldr	r3, [r7, #12]
 8021e00:	681b      	ldr	r3, [r3, #0]
 8021e02:	330c      	adds	r3, #12
 8021e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021e06:	637a      	str	r2, [r7, #52]	; 0x34
 8021e08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021e0e:	e841 2300 	strex	r3, r2, [r1]
 8021e12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8021e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e16:	2b00      	cmp	r3, #0
 8021e18:	d1e5      	bne.n	8021de6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021e1a:	68fb      	ldr	r3, [r7, #12]
 8021e1c:	681b      	ldr	r3, [r3, #0]
 8021e1e:	3314      	adds	r3, #20
 8021e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021e22:	697b      	ldr	r3, [r7, #20]
 8021e24:	e853 3f00 	ldrex	r3, [r3]
 8021e28:	613b      	str	r3, [r7, #16]
   return(result);
 8021e2a:	693b      	ldr	r3, [r7, #16]
 8021e2c:	f023 0301 	bic.w	r3, r3, #1
 8021e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8021e32:	68fb      	ldr	r3, [r7, #12]
 8021e34:	681b      	ldr	r3, [r3, #0]
 8021e36:	3314      	adds	r3, #20
 8021e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021e3a:	623a      	str	r2, [r7, #32]
 8021e3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021e3e:	69f9      	ldr	r1, [r7, #28]
 8021e40:	6a3a      	ldr	r2, [r7, #32]
 8021e42:	e841 2300 	strex	r3, r2, [r1]
 8021e46:	61bb      	str	r3, [r7, #24]
   return(result);
 8021e48:	69bb      	ldr	r3, [r7, #24]
 8021e4a:	2b00      	cmp	r3, #0
 8021e4c:	d1e5      	bne.n	8021e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8021e4e:	68fb      	ldr	r3, [r7, #12]
 8021e50:	2220      	movs	r2, #32
 8021e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8021e56:	68fb      	ldr	r3, [r7, #12]
 8021e58:	2220      	movs	r2, #32
 8021e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8021e5e:	68fb      	ldr	r3, [r7, #12]
 8021e60:	2200      	movs	r2, #0
 8021e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8021e66:	2303      	movs	r3, #3
 8021e68:	e00f      	b.n	8021e8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021e6a:	68fb      	ldr	r3, [r7, #12]
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	681a      	ldr	r2, [r3, #0]
 8021e70:	68bb      	ldr	r3, [r7, #8]
 8021e72:	4013      	ands	r3, r2
 8021e74:	68ba      	ldr	r2, [r7, #8]
 8021e76:	429a      	cmp	r2, r3
 8021e78:	bf0c      	ite	eq
 8021e7a:	2301      	moveq	r3, #1
 8021e7c:	2300      	movne	r3, #0
 8021e7e:	b2db      	uxtb	r3, r3
 8021e80:	461a      	mov	r2, r3
 8021e82:	79fb      	ldrb	r3, [r7, #7]
 8021e84:	429a      	cmp	r2, r3
 8021e86:	d09f      	beq.n	8021dc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8021e88:	2300      	movs	r3, #0
}
 8021e8a:	4618      	mov	r0, r3
 8021e8c:	3740      	adds	r7, #64	; 0x40
 8021e8e:	46bd      	mov	sp, r7
 8021e90:	bd80      	pop	{r7, pc}
	...

08021e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8021e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021e98:	b0c0      	sub	sp, #256	; 0x100
 8021e9a:	af00      	add	r7, sp, #0
 8021e9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	691b      	ldr	r3, [r3, #16]
 8021ea8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8021eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021eb0:	68d9      	ldr	r1, [r3, #12]
 8021eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021eb6:	681a      	ldr	r2, [r3, #0]
 8021eb8:	ea40 0301 	orr.w	r3, r0, r1
 8021ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8021ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021ec2:	689a      	ldr	r2, [r3, #8]
 8021ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021ec8:	691b      	ldr	r3, [r3, #16]
 8021eca:	431a      	orrs	r2, r3
 8021ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021ed0:	695b      	ldr	r3, [r3, #20]
 8021ed2:	431a      	orrs	r2, r3
 8021ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021ed8:	69db      	ldr	r3, [r3, #28]
 8021eda:	4313      	orrs	r3, r2
 8021edc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8021ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	68db      	ldr	r3, [r3, #12]
 8021ee8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8021eec:	f021 010c 	bic.w	r1, r1, #12
 8021ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021ef4:	681a      	ldr	r2, [r3, #0]
 8021ef6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8021efa:	430b      	orrs	r3, r1
 8021efc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021f02:	681b      	ldr	r3, [r3, #0]
 8021f04:	695b      	ldr	r3, [r3, #20]
 8021f06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8021f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021f0e:	6999      	ldr	r1, [r3, #24]
 8021f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021f14:	681a      	ldr	r2, [r3, #0]
 8021f16:	ea40 0301 	orr.w	r3, r0, r1
 8021f1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021f20:	681a      	ldr	r2, [r3, #0]
 8021f22:	4b8f      	ldr	r3, [pc, #572]	; (8022160 <UART_SetConfig+0x2cc>)
 8021f24:	429a      	cmp	r2, r3
 8021f26:	d005      	beq.n	8021f34 <UART_SetConfig+0xa0>
 8021f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021f2c:	681a      	ldr	r2, [r3, #0]
 8021f2e:	4b8d      	ldr	r3, [pc, #564]	; (8022164 <UART_SetConfig+0x2d0>)
 8021f30:	429a      	cmp	r2, r3
 8021f32:	d104      	bne.n	8021f3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021f34:	f7ff fcdc 	bl	80218f0 <HAL_RCC_GetPCLK2Freq>
 8021f38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8021f3c:	e003      	b.n	8021f46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8021f3e:	f7ff fcc3 	bl	80218c8 <HAL_RCC_GetPCLK1Freq>
 8021f42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021f4a:	69db      	ldr	r3, [r3, #28]
 8021f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021f50:	f040 810c 	bne.w	802216c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021f54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021f58:	2200      	movs	r2, #0
 8021f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8021f5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8021f62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8021f66:	4622      	mov	r2, r4
 8021f68:	462b      	mov	r3, r5
 8021f6a:	1891      	adds	r1, r2, r2
 8021f6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8021f6e:	415b      	adcs	r3, r3
 8021f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021f72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8021f76:	4621      	mov	r1, r4
 8021f78:	eb12 0801 	adds.w	r8, r2, r1
 8021f7c:	4629      	mov	r1, r5
 8021f7e:	eb43 0901 	adc.w	r9, r3, r1
 8021f82:	f04f 0200 	mov.w	r2, #0
 8021f86:	f04f 0300 	mov.w	r3, #0
 8021f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021f96:	4690      	mov	r8, r2
 8021f98:	4699      	mov	r9, r3
 8021f9a:	4623      	mov	r3, r4
 8021f9c:	eb18 0303 	adds.w	r3, r8, r3
 8021fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8021fa4:	462b      	mov	r3, r5
 8021fa6:	eb49 0303 	adc.w	r3, r9, r3
 8021faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8021fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8021fb2:	685b      	ldr	r3, [r3, #4]
 8021fb4:	2200      	movs	r2, #0
 8021fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8021fba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8021fbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8021fc2:	460b      	mov	r3, r1
 8021fc4:	18db      	adds	r3, r3, r3
 8021fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8021fc8:	4613      	mov	r3, r2
 8021fca:	eb42 0303 	adc.w	r3, r2, r3
 8021fce:	657b      	str	r3, [r7, #84]	; 0x54
 8021fd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8021fd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8021fd8:	f7fe f8fe 	bl	80201d8 <__aeabi_uldivmod>
 8021fdc:	4602      	mov	r2, r0
 8021fde:	460b      	mov	r3, r1
 8021fe0:	4b61      	ldr	r3, [pc, #388]	; (8022168 <UART_SetConfig+0x2d4>)
 8021fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8021fe6:	095b      	lsrs	r3, r3, #5
 8021fe8:	011c      	lsls	r4, r3, #4
 8021fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8021fee:	2200      	movs	r2, #0
 8021ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8021ff4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8021ff8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8021ffc:	4642      	mov	r2, r8
 8021ffe:	464b      	mov	r3, r9
 8022000:	1891      	adds	r1, r2, r2
 8022002:	64b9      	str	r1, [r7, #72]	; 0x48
 8022004:	415b      	adcs	r3, r3
 8022006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022008:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802200c:	4641      	mov	r1, r8
 802200e:	eb12 0a01 	adds.w	sl, r2, r1
 8022012:	4649      	mov	r1, r9
 8022014:	eb43 0b01 	adc.w	fp, r3, r1
 8022018:	f04f 0200 	mov.w	r2, #0
 802201c:	f04f 0300 	mov.w	r3, #0
 8022020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8022024:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8022028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802202c:	4692      	mov	sl, r2
 802202e:	469b      	mov	fp, r3
 8022030:	4643      	mov	r3, r8
 8022032:	eb1a 0303 	adds.w	r3, sl, r3
 8022036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802203a:	464b      	mov	r3, r9
 802203c:	eb4b 0303 	adc.w	r3, fp, r3
 8022040:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022048:	685b      	ldr	r3, [r3, #4]
 802204a:	2200      	movs	r2, #0
 802204c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022050:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8022054:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8022058:	460b      	mov	r3, r1
 802205a:	18db      	adds	r3, r3, r3
 802205c:	643b      	str	r3, [r7, #64]	; 0x40
 802205e:	4613      	mov	r3, r2
 8022060:	eb42 0303 	adc.w	r3, r2, r3
 8022064:	647b      	str	r3, [r7, #68]	; 0x44
 8022066:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802206a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802206e:	f7fe f8b3 	bl	80201d8 <__aeabi_uldivmod>
 8022072:	4602      	mov	r2, r0
 8022074:	460b      	mov	r3, r1
 8022076:	4611      	mov	r1, r2
 8022078:	4b3b      	ldr	r3, [pc, #236]	; (8022168 <UART_SetConfig+0x2d4>)
 802207a:	fba3 2301 	umull	r2, r3, r3, r1
 802207e:	095b      	lsrs	r3, r3, #5
 8022080:	2264      	movs	r2, #100	; 0x64
 8022082:	fb02 f303 	mul.w	r3, r2, r3
 8022086:	1acb      	subs	r3, r1, r3
 8022088:	00db      	lsls	r3, r3, #3
 802208a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802208e:	4b36      	ldr	r3, [pc, #216]	; (8022168 <UART_SetConfig+0x2d4>)
 8022090:	fba3 2302 	umull	r2, r3, r3, r2
 8022094:	095b      	lsrs	r3, r3, #5
 8022096:	005b      	lsls	r3, r3, #1
 8022098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802209c:	441c      	add	r4, r3
 802209e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80220a2:	2200      	movs	r2, #0
 80220a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80220a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80220ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80220b0:	4642      	mov	r2, r8
 80220b2:	464b      	mov	r3, r9
 80220b4:	1891      	adds	r1, r2, r2
 80220b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80220b8:	415b      	adcs	r3, r3
 80220ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80220bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80220c0:	4641      	mov	r1, r8
 80220c2:	1851      	adds	r1, r2, r1
 80220c4:	6339      	str	r1, [r7, #48]	; 0x30
 80220c6:	4649      	mov	r1, r9
 80220c8:	414b      	adcs	r3, r1
 80220ca:	637b      	str	r3, [r7, #52]	; 0x34
 80220cc:	f04f 0200 	mov.w	r2, #0
 80220d0:	f04f 0300 	mov.w	r3, #0
 80220d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80220d8:	4659      	mov	r1, fp
 80220da:	00cb      	lsls	r3, r1, #3
 80220dc:	4651      	mov	r1, sl
 80220de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80220e2:	4651      	mov	r1, sl
 80220e4:	00ca      	lsls	r2, r1, #3
 80220e6:	4610      	mov	r0, r2
 80220e8:	4619      	mov	r1, r3
 80220ea:	4603      	mov	r3, r0
 80220ec:	4642      	mov	r2, r8
 80220ee:	189b      	adds	r3, r3, r2
 80220f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80220f4:	464b      	mov	r3, r9
 80220f6:	460a      	mov	r2, r1
 80220f8:	eb42 0303 	adc.w	r3, r2, r3
 80220fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022104:	685b      	ldr	r3, [r3, #4]
 8022106:	2200      	movs	r2, #0
 8022108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802210c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8022110:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8022114:	460b      	mov	r3, r1
 8022116:	18db      	adds	r3, r3, r3
 8022118:	62bb      	str	r3, [r7, #40]	; 0x28
 802211a:	4613      	mov	r3, r2
 802211c:	eb42 0303 	adc.w	r3, r2, r3
 8022120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022122:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022126:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802212a:	f7fe f855 	bl	80201d8 <__aeabi_uldivmod>
 802212e:	4602      	mov	r2, r0
 8022130:	460b      	mov	r3, r1
 8022132:	4b0d      	ldr	r3, [pc, #52]	; (8022168 <UART_SetConfig+0x2d4>)
 8022134:	fba3 1302 	umull	r1, r3, r3, r2
 8022138:	095b      	lsrs	r3, r3, #5
 802213a:	2164      	movs	r1, #100	; 0x64
 802213c:	fb01 f303 	mul.w	r3, r1, r3
 8022140:	1ad3      	subs	r3, r2, r3
 8022142:	00db      	lsls	r3, r3, #3
 8022144:	3332      	adds	r3, #50	; 0x32
 8022146:	4a08      	ldr	r2, [pc, #32]	; (8022168 <UART_SetConfig+0x2d4>)
 8022148:	fba2 2303 	umull	r2, r3, r2, r3
 802214c:	095b      	lsrs	r3, r3, #5
 802214e:	f003 0207 	and.w	r2, r3, #7
 8022152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022156:	681b      	ldr	r3, [r3, #0]
 8022158:	4422      	add	r2, r4
 802215a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802215c:	e105      	b.n	802236a <UART_SetConfig+0x4d6>
 802215e:	bf00      	nop
 8022160:	40011000 	.word	0x40011000
 8022164:	40011400 	.word	0x40011400
 8022168:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802216c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022170:	2200      	movs	r2, #0
 8022172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8022176:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802217a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802217e:	4642      	mov	r2, r8
 8022180:	464b      	mov	r3, r9
 8022182:	1891      	adds	r1, r2, r2
 8022184:	6239      	str	r1, [r7, #32]
 8022186:	415b      	adcs	r3, r3
 8022188:	627b      	str	r3, [r7, #36]	; 0x24
 802218a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802218e:	4641      	mov	r1, r8
 8022190:	1854      	adds	r4, r2, r1
 8022192:	4649      	mov	r1, r9
 8022194:	eb43 0501 	adc.w	r5, r3, r1
 8022198:	f04f 0200 	mov.w	r2, #0
 802219c:	f04f 0300 	mov.w	r3, #0
 80221a0:	00eb      	lsls	r3, r5, #3
 80221a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80221a6:	00e2      	lsls	r2, r4, #3
 80221a8:	4614      	mov	r4, r2
 80221aa:	461d      	mov	r5, r3
 80221ac:	4643      	mov	r3, r8
 80221ae:	18e3      	adds	r3, r4, r3
 80221b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80221b4:	464b      	mov	r3, r9
 80221b6:	eb45 0303 	adc.w	r3, r5, r3
 80221ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80221be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80221c2:	685b      	ldr	r3, [r3, #4]
 80221c4:	2200      	movs	r2, #0
 80221c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80221ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80221ce:	f04f 0200 	mov.w	r2, #0
 80221d2:	f04f 0300 	mov.w	r3, #0
 80221d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80221da:	4629      	mov	r1, r5
 80221dc:	008b      	lsls	r3, r1, #2
 80221de:	4621      	mov	r1, r4
 80221e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80221e4:	4621      	mov	r1, r4
 80221e6:	008a      	lsls	r2, r1, #2
 80221e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80221ec:	f7fd fff4 	bl	80201d8 <__aeabi_uldivmod>
 80221f0:	4602      	mov	r2, r0
 80221f2:	460b      	mov	r3, r1
 80221f4:	4b60      	ldr	r3, [pc, #384]	; (8022378 <UART_SetConfig+0x4e4>)
 80221f6:	fba3 2302 	umull	r2, r3, r3, r2
 80221fa:	095b      	lsrs	r3, r3, #5
 80221fc:	011c      	lsls	r4, r3, #4
 80221fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8022202:	2200      	movs	r2, #0
 8022204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8022208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802220c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8022210:	4642      	mov	r2, r8
 8022212:	464b      	mov	r3, r9
 8022214:	1891      	adds	r1, r2, r2
 8022216:	61b9      	str	r1, [r7, #24]
 8022218:	415b      	adcs	r3, r3
 802221a:	61fb      	str	r3, [r7, #28]
 802221c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022220:	4641      	mov	r1, r8
 8022222:	1851      	adds	r1, r2, r1
 8022224:	6139      	str	r1, [r7, #16]
 8022226:	4649      	mov	r1, r9
 8022228:	414b      	adcs	r3, r1
 802222a:	617b      	str	r3, [r7, #20]
 802222c:	f04f 0200 	mov.w	r2, #0
 8022230:	f04f 0300 	mov.w	r3, #0
 8022234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022238:	4659      	mov	r1, fp
 802223a:	00cb      	lsls	r3, r1, #3
 802223c:	4651      	mov	r1, sl
 802223e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8022242:	4651      	mov	r1, sl
 8022244:	00ca      	lsls	r2, r1, #3
 8022246:	4610      	mov	r0, r2
 8022248:	4619      	mov	r1, r3
 802224a:	4603      	mov	r3, r0
 802224c:	4642      	mov	r2, r8
 802224e:	189b      	adds	r3, r3, r2
 8022250:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8022254:	464b      	mov	r3, r9
 8022256:	460a      	mov	r2, r1
 8022258:	eb42 0303 	adc.w	r3, r2, r3
 802225c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022264:	685b      	ldr	r3, [r3, #4]
 8022266:	2200      	movs	r2, #0
 8022268:	67bb      	str	r3, [r7, #120]	; 0x78
 802226a:	67fa      	str	r2, [r7, #124]	; 0x7c
 802226c:	f04f 0200 	mov.w	r2, #0
 8022270:	f04f 0300 	mov.w	r3, #0
 8022274:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8022278:	4649      	mov	r1, r9
 802227a:	008b      	lsls	r3, r1, #2
 802227c:	4641      	mov	r1, r8
 802227e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022282:	4641      	mov	r1, r8
 8022284:	008a      	lsls	r2, r1, #2
 8022286:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802228a:	f7fd ffa5 	bl	80201d8 <__aeabi_uldivmod>
 802228e:	4602      	mov	r2, r0
 8022290:	460b      	mov	r3, r1
 8022292:	4b39      	ldr	r3, [pc, #228]	; (8022378 <UART_SetConfig+0x4e4>)
 8022294:	fba3 1302 	umull	r1, r3, r3, r2
 8022298:	095b      	lsrs	r3, r3, #5
 802229a:	2164      	movs	r1, #100	; 0x64
 802229c:	fb01 f303 	mul.w	r3, r1, r3
 80222a0:	1ad3      	subs	r3, r2, r3
 80222a2:	011b      	lsls	r3, r3, #4
 80222a4:	3332      	adds	r3, #50	; 0x32
 80222a6:	4a34      	ldr	r2, [pc, #208]	; (8022378 <UART_SetConfig+0x4e4>)
 80222a8:	fba2 2303 	umull	r2, r3, r2, r3
 80222ac:	095b      	lsrs	r3, r3, #5
 80222ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80222b2:	441c      	add	r4, r3
 80222b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80222b8:	2200      	movs	r2, #0
 80222ba:	673b      	str	r3, [r7, #112]	; 0x70
 80222bc:	677a      	str	r2, [r7, #116]	; 0x74
 80222be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80222c2:	4642      	mov	r2, r8
 80222c4:	464b      	mov	r3, r9
 80222c6:	1891      	adds	r1, r2, r2
 80222c8:	60b9      	str	r1, [r7, #8]
 80222ca:	415b      	adcs	r3, r3
 80222cc:	60fb      	str	r3, [r7, #12]
 80222ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80222d2:	4641      	mov	r1, r8
 80222d4:	1851      	adds	r1, r2, r1
 80222d6:	6039      	str	r1, [r7, #0]
 80222d8:	4649      	mov	r1, r9
 80222da:	414b      	adcs	r3, r1
 80222dc:	607b      	str	r3, [r7, #4]
 80222de:	f04f 0200 	mov.w	r2, #0
 80222e2:	f04f 0300 	mov.w	r3, #0
 80222e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80222ea:	4659      	mov	r1, fp
 80222ec:	00cb      	lsls	r3, r1, #3
 80222ee:	4651      	mov	r1, sl
 80222f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80222f4:	4651      	mov	r1, sl
 80222f6:	00ca      	lsls	r2, r1, #3
 80222f8:	4610      	mov	r0, r2
 80222fa:	4619      	mov	r1, r3
 80222fc:	4603      	mov	r3, r0
 80222fe:	4642      	mov	r2, r8
 8022300:	189b      	adds	r3, r3, r2
 8022302:	66bb      	str	r3, [r7, #104]	; 0x68
 8022304:	464b      	mov	r3, r9
 8022306:	460a      	mov	r2, r1
 8022308:	eb42 0303 	adc.w	r3, r2, r3
 802230c:	66fb      	str	r3, [r7, #108]	; 0x6c
 802230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022312:	685b      	ldr	r3, [r3, #4]
 8022314:	2200      	movs	r2, #0
 8022316:	663b      	str	r3, [r7, #96]	; 0x60
 8022318:	667a      	str	r2, [r7, #100]	; 0x64
 802231a:	f04f 0200 	mov.w	r2, #0
 802231e:	f04f 0300 	mov.w	r3, #0
 8022322:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8022326:	4649      	mov	r1, r9
 8022328:	008b      	lsls	r3, r1, #2
 802232a:	4641      	mov	r1, r8
 802232c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8022330:	4641      	mov	r1, r8
 8022332:	008a      	lsls	r2, r1, #2
 8022334:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8022338:	f7fd ff4e 	bl	80201d8 <__aeabi_uldivmod>
 802233c:	4602      	mov	r2, r0
 802233e:	460b      	mov	r3, r1
 8022340:	4b0d      	ldr	r3, [pc, #52]	; (8022378 <UART_SetConfig+0x4e4>)
 8022342:	fba3 1302 	umull	r1, r3, r3, r2
 8022346:	095b      	lsrs	r3, r3, #5
 8022348:	2164      	movs	r1, #100	; 0x64
 802234a:	fb01 f303 	mul.w	r3, r1, r3
 802234e:	1ad3      	subs	r3, r2, r3
 8022350:	011b      	lsls	r3, r3, #4
 8022352:	3332      	adds	r3, #50	; 0x32
 8022354:	4a08      	ldr	r2, [pc, #32]	; (8022378 <UART_SetConfig+0x4e4>)
 8022356:	fba2 2303 	umull	r2, r3, r2, r3
 802235a:	095b      	lsrs	r3, r3, #5
 802235c:	f003 020f 	and.w	r2, r3, #15
 8022360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022364:	681b      	ldr	r3, [r3, #0]
 8022366:	4422      	add	r2, r4
 8022368:	609a      	str	r2, [r3, #8]
}
 802236a:	bf00      	nop
 802236c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8022370:	46bd      	mov	sp, r7
 8022372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022376:	bf00      	nop
 8022378:	51eb851f 	.word	0x51eb851f

0802237c <__libc_init_array>:
 802237c:	b570      	push	{r4, r5, r6, lr}
 802237e:	4d0d      	ldr	r5, [pc, #52]	; (80223b4 <__libc_init_array+0x38>)
 8022380:	4c0d      	ldr	r4, [pc, #52]	; (80223b8 <__libc_init_array+0x3c>)
 8022382:	1b64      	subs	r4, r4, r5
 8022384:	10a4      	asrs	r4, r4, #2
 8022386:	2600      	movs	r6, #0
 8022388:	42a6      	cmp	r6, r4
 802238a:	d109      	bne.n	80223a0 <__libc_init_array+0x24>
 802238c:	4d0b      	ldr	r5, [pc, #44]	; (80223bc <__libc_init_array+0x40>)
 802238e:	4c0c      	ldr	r4, [pc, #48]	; (80223c0 <__libc_init_array+0x44>)
 8022390:	f000 f830 	bl	80223f4 <_init>
 8022394:	1b64      	subs	r4, r4, r5
 8022396:	10a4      	asrs	r4, r4, #2
 8022398:	2600      	movs	r6, #0
 802239a:	42a6      	cmp	r6, r4
 802239c:	d105      	bne.n	80223aa <__libc_init_array+0x2e>
 802239e:	bd70      	pop	{r4, r5, r6, pc}
 80223a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80223a4:	4798      	blx	r3
 80223a6:	3601      	adds	r6, #1
 80223a8:	e7ee      	b.n	8022388 <__libc_init_array+0xc>
 80223aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80223ae:	4798      	blx	r3
 80223b0:	3601      	adds	r6, #1
 80223b2:	e7f2      	b.n	802239a <__libc_init_array+0x1e>
 80223b4:	08022434 	.word	0x08022434
 80223b8:	08022434 	.word	0x08022434
 80223bc:	08022434 	.word	0x08022434
 80223c0:	08022438 	.word	0x08022438

080223c4 <memcmp>:
 80223c4:	b510      	push	{r4, lr}
 80223c6:	3901      	subs	r1, #1
 80223c8:	4402      	add	r2, r0
 80223ca:	4290      	cmp	r0, r2
 80223cc:	d101      	bne.n	80223d2 <memcmp+0xe>
 80223ce:	2000      	movs	r0, #0
 80223d0:	e005      	b.n	80223de <memcmp+0x1a>
 80223d2:	7803      	ldrb	r3, [r0, #0]
 80223d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80223d8:	42a3      	cmp	r3, r4
 80223da:	d001      	beq.n	80223e0 <memcmp+0x1c>
 80223dc:	1b18      	subs	r0, r3, r4
 80223de:	bd10      	pop	{r4, pc}
 80223e0:	3001      	adds	r0, #1
 80223e2:	e7f2      	b.n	80223ca <memcmp+0x6>

080223e4 <memset>:
 80223e4:	4402      	add	r2, r0
 80223e6:	4603      	mov	r3, r0
 80223e8:	4293      	cmp	r3, r2
 80223ea:	d100      	bne.n	80223ee <memset+0xa>
 80223ec:	4770      	bx	lr
 80223ee:	f803 1b01 	strb.w	r1, [r3], #1
 80223f2:	e7f9      	b.n	80223e8 <memset+0x4>

080223f4 <_init>:
 80223f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223f6:	bf00      	nop
 80223f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80223fa:	bc08      	pop	{r3}
 80223fc:	469e      	mov	lr, r3
 80223fe:	4770      	bx	lr

08022400 <_fini>:
 8022400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022402:	bf00      	nop
 8022404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022406:	bc08      	pop	{r3}
 8022408:	469e      	mov	lr, r3
 802240a:	4770      	bx	lr
